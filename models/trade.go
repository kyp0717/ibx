// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// Trade trade
// swagger:model trade
type Trade struct {

	// account
	Account string `json:"account,omitempty"`

	// clearing id
	ClearingID string `json:"clearing_id,omitempty"`

	// clearing name
	ClearingName string `json:"clearing_name,omitempty"`

	// comission
	Comission float64 `json:"comission,omitempty"`

	// company name
	CompanyName string `json:"company_name,omitempty"`

	// conidex
	Conidex string `json:"conidex,omitempty"`

	// contract description 1
	ContractDescription1 string `json:"contract_description_1,omitempty"`

	// exchange
	Exchange string `json:"exchange,omitempty"`

	// execution id
	ExecutionID string `json:"execution_id,omitempty"`

	// net amount
	NetAmount float64 `json:"net_amount,omitempty"`

	// order description
	OrderDescription string `json:"order_description,omitempty"`

	// User defined string used to identify the order. Value is set using "cOID" field while placing an order.
	OrderRef string `json:"order_ref,omitempty"`

	// position
	Position string `json:"position,omitempty"`

	// price
	Price string `json:"price,omitempty"`

	// sec type
	SecType string `json:"sec_type,omitempty"`

	// side
	Side string `json:"side,omitempty"`

	// size
	Size string `json:"size,omitempty"`

	// submitter
	Submitter string `json:"submitter,omitempty"`

	// symbol
	Symbol string `json:"symbol,omitempty"`

	// trade time
	TradeTime string `json:"trade_time,omitempty"`

	// trade time r
	TradeTimer float64 `json:"trade_time_r,omitempty"`
}

// Validate validates this trade
func (m *Trade) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Trade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Trade) UnmarshalBinary(b []byte) error {
	var res Trade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
