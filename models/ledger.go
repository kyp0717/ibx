// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// Ledger ledger
// swagger:model ledger
type Ledger struct {

	// acctcode
	Acctcode string `json:"acctcode,omitempty"`

	// cashbalance
	Cashbalance float64 `json:"cashbalance,omitempty"`

	// commoditymarketvalue
	Commoditymarketvalue float64 `json:"commoditymarketvalue,omitempty"`

	// corporatebondsmarketvalue
	Corporatebondsmarketvalue float64 `json:"corporatebondsmarketvalue,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// exchangerate
	Exchangerate float64 `json:"exchangerate,omitempty"`

	// funds
	Funds float64 `json:"funds,omitempty"`

	// futuremarketvalue
	Futuremarketvalue float64 `json:"futuremarketvalue,omitempty"`

	// interest
	Interest float64 `json:"interest,omitempty"`

	// issueroptionsmarketvalue
	Issueroptionsmarketvalue float64 `json:"issueroptionsmarketvalue,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// moneyfunds
	Moneyfunds float64 `json:"moneyfunds,omitempty"`

	// netliquidationvalue
	Netliquidationvalue float64 `json:"netliquidationvalue,omitempty"`

	// realizedpnl
	Realizedpnl float64 `json:"realizedpnl,omitempty"`

	// sessionid
	Sessionid int64 `json:"sessionid,omitempty"`

	// settledcash
	Settledcash float64 `json:"settledcash,omitempty"`

	// severity
	Severity int64 `json:"severity,omitempty"`

	// stockmarketvalue
	Stockmarketvalue float64 `json:"stockmarketvalue,omitempty"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`

	// unrealizedpnl
	Unrealizedpnl float64 `json:"unrealizedpnl,omitempty"`

	// warrantsmarketvalue
	Warrantsmarketvalue float64 `json:"warrantsmarketvalue,omitempty"`
}

// Validate validates this ledger
func (m *Ledger) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Ledger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Ledger) UnmarshalBinary(b []byte) error {
	var res Ledger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
