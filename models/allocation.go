// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Allocation allocation
// swagger:model allocation
type Allocation []*AllocationItems0

// Validate validates this allocation
func (m Allocation) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// AllocationItems0 allocation
// swagger:model AllocationItems0
type AllocationItems0 struct {

	// asset class
	AssetClass *AllocationItems0AssetClass `json:"assetClass,omitempty"`

	// group
	Group *AllocationItems0Group `json:"group,omitempty"`

	// sector
	Sector *AllocationItems0Sector `json:"sector,omitempty"`
}

// Validate validates this allocation items0
func (m *AllocationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllocationItems0) validateAssetClass(formats strfmt.Registry) error {

	if swag.IsZero(m.AssetClass) { // not required
		return nil
	}

	if m.AssetClass != nil {
		if err := m.AssetClass.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetClass")
			}
			return err
		}
	}

	return nil
}

func (m *AllocationItems0) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if m.Group != nil {
		if err := m.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *AllocationItems0) validateSector(formats strfmt.Registry) error {

	if swag.IsZero(m.Sector) { // not required
		return nil
	}

	if m.Sector != nil {
		if err := m.Sector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sector")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AllocationItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationItems0) UnmarshalBinary(b []byte) error {
	var res AllocationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllocationItems0AssetClass portfolio allocation by asset class
// swagger:model AllocationItems0AssetClass
type AllocationItems0AssetClass struct {

	// long
	Long *AllocationItems0AssetClassLong `json:"long,omitempty"`

	// short
	Short *AllocationItems0AssetClassShort `json:"short,omitempty"`
}

// Validate validates this allocation items0 asset class
func (m *AllocationItems0AssetClass) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLong(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllocationItems0AssetClass) validateLong(formats strfmt.Registry) error {

	if swag.IsZero(m.Long) { // not required
		return nil
	}

	if m.Long != nil {
		if err := m.Long.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetClass" + "." + "long")
			}
			return err
		}
	}

	return nil
}

func (m *AllocationItems0AssetClass) validateShort(formats strfmt.Registry) error {

	if swag.IsZero(m.Short) { // not required
		return nil
	}

	if m.Short != nil {
		if err := m.Short.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetClass" + "." + "short")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AllocationItems0AssetClass) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationItems0AssetClass) UnmarshalBinary(b []byte) error {
	var res AllocationItems0AssetClass
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllocationItems0AssetClassLong long positions allocation
// swagger:model AllocationItems0AssetClassLong
type AllocationItems0AssetClassLong struct {

	// b o n d
	BOND float64 `json:"BOND,omitempty"`

	// c a s h
	CASH float64 `json:"CASH,omitempty"`

	// f u t
	FUT float64 `json:"FUT,omitempty"`

	// o p t
	OPT float64 `json:"OPT,omitempty"`

	// s t k
	STK float64 `json:"STK,omitempty"`

	// w a r
	WAR float64 `json:"WAR,omitempty"`
}

// Validate validates this allocation items0 asset class long
func (m *AllocationItems0AssetClassLong) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AllocationItems0AssetClassLong) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationItems0AssetClassLong) UnmarshalBinary(b []byte) error {
	var res AllocationItems0AssetClassLong
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllocationItems0AssetClassShort short positions allocation
// swagger:model AllocationItems0AssetClassShort
type AllocationItems0AssetClassShort struct {

	// b o n d
	BOND float64 `json:"BOND,omitempty"`

	// c a s h
	CASH float64 `json:"CASH,omitempty"`

	// f u t
	FUT float64 `json:"FUT,omitempty"`

	// o p t
	OPT float64 `json:"OPT,omitempty"`

	// s t k
	STK float64 `json:"STK,omitempty"`

	// w a r
	WAR float64 `json:"WAR,omitempty"`
}

// Validate validates this allocation items0 asset class short
func (m *AllocationItems0AssetClassShort) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AllocationItems0AssetClassShort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationItems0AssetClassShort) UnmarshalBinary(b []byte) error {
	var res AllocationItems0AssetClassShort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllocationItems0Group portfolio allocation by group
// swagger:model AllocationItems0Group
type AllocationItems0Group struct {

	// long
	Long *AllocationItems0GroupLong `json:"long,omitempty"`

	// short
	Short *AllocationItems0GroupShort `json:"short,omitempty"`
}

// Validate validates this allocation items0 group
func (m *AllocationItems0Group) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLong(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllocationItems0Group) validateLong(formats strfmt.Registry) error {

	if swag.IsZero(m.Long) { // not required
		return nil
	}

	if m.Long != nil {
		if err := m.Long.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group" + "." + "long")
			}
			return err
		}
	}

	return nil
}

func (m *AllocationItems0Group) validateShort(formats strfmt.Registry) error {

	if swag.IsZero(m.Short) { // not required
		return nil
	}

	if m.Short != nil {
		if err := m.Short.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group" + "." + "short")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AllocationItems0Group) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationItems0Group) UnmarshalBinary(b []byte) error {
	var res AllocationItems0Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllocationItems0GroupLong long positions allocation
// swagger:model AllocationItems0GroupLong
type AllocationItems0GroupLong struct {

	// apparel
	Apparel float64 `json:"Apparel,omitempty"`

	// chemicals
	Chemicals float64 `json:"Chemicals,omitempty"`

	// communications
	Communications float64 `json:"Communications,omitempty"`

	// computers
	Computers float64 `json:"Computers,omitempty"`

	// others
	Others float64 `json:"Others,omitempty"`

	// semiconductors
	Semiconductors float64 `json:"Semiconductors,omitempty"`
}

// Validate validates this allocation items0 group long
func (m *AllocationItems0GroupLong) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AllocationItems0GroupLong) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationItems0GroupLong) UnmarshalBinary(b []byte) error {
	var res AllocationItems0GroupLong
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllocationItems0GroupShort short positions allocation
// swagger:model AllocationItems0GroupShort
type AllocationItems0GroupShort struct {

	// airlines
	Airlines float64 `json:"Airlines,omitempty"`

	// banks
	Banks float64 `json:"Banks,omitempty"`

	// internet
	Internet float64 `json:"Internet,omitempty"`
}

// Validate validates this allocation items0 group short
func (m *AllocationItems0GroupShort) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AllocationItems0GroupShort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationItems0GroupShort) UnmarshalBinary(b []byte) error {
	var res AllocationItems0GroupShort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllocationItems0Sector portfolio allocation by sector
// swagger:model AllocationItems0Sector
type AllocationItems0Sector struct {

	// long
	Long *AllocationItems0SectorLong `json:"long,omitempty"`

	// short
	Short *AllocationItems0SectorShort `json:"short,omitempty"`
}

// Validate validates this allocation items0 sector
func (m *AllocationItems0Sector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLong(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllocationItems0Sector) validateLong(formats strfmt.Registry) error {

	if swag.IsZero(m.Long) { // not required
		return nil
	}

	if m.Long != nil {
		if err := m.Long.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sector" + "." + "long")
			}
			return err
		}
	}

	return nil
}

func (m *AllocationItems0Sector) validateShort(formats strfmt.Registry) error {

	if swag.IsZero(m.Short) { // not required
		return nil
	}

	if m.Short != nil {
		if err := m.Short.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sector" + "." + "short")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AllocationItems0Sector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationItems0Sector) UnmarshalBinary(b []byte) error {
	var res AllocationItems0Sector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllocationItems0SectorLong long positions allocation
// swagger:model AllocationItems0SectorLong
type AllocationItems0SectorLong struct {

	// communications
	Communications float64 `json:"Communications,omitempty"`

	// energy
	Energy float64 `json:"Energy,omitempty"`

	// financial
	Financial float64 `json:"Financial,omitempty"`

	// others
	Others float64 `json:"Others,omitempty"`

	// technology
	Technology float64 `json:"Technology,omitempty"`

	// utilities
	Utilities float64 `json:"Utilities,omitempty"`
}

// Validate validates this allocation items0 sector long
func (m *AllocationItems0SectorLong) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AllocationItems0SectorLong) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationItems0SectorLong) UnmarshalBinary(b []byte) error {
	var res AllocationItems0SectorLong
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AllocationItems0SectorShort short positions allocation
// swagger:model AllocationItems0SectorShort
type AllocationItems0SectorShort struct {

	// consumer
	Consumer float64 `json:"Consumer,omitempty"`

	// diversified
	Diversified float64 `json:"Diversified,omitempty"`

	// industrial
	Industrial float64 `json:"Industrial,omitempty"`
}

// Validate validates this allocation items0 sector short
func (m *AllocationItems0SectorShort) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AllocationItems0SectorShort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationItems0SectorShort) UnmarshalBinary(b []byte) error {
	var res AllocationItems0SectorShort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
