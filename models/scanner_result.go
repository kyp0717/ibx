// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ScannerResult scanner result
// swagger:model scanner-result
type ScannerResult struct {

	// contracts
	Contracts *ScannerResultContracts `json:"Contracts,omitempty"`

	// id
	ID float64 `json:"id,omitempty"`

	// offset
	Offset int64 `json:"offset,omitempty"`

	// position
	Position string `json:"position,omitempty"`

	// scan time
	ScanTime string `json:"scanTime,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this scanner result
func (m *ScannerResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContracts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScannerResult) validateContracts(formats strfmt.Registry) error {

	if swag.IsZero(m.Contracts) { // not required
		return nil
	}

	if m.Contracts != nil {
		if err := m.Contracts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Contracts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScannerResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScannerResult) UnmarshalBinary(b []byte) error {
	var res ScannerResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScannerResultContracts Contains list of contracts matching the scanner query
// swagger:model ScannerResultContracts
type ScannerResultContracts struct {

	// contract
	Contract []*ScannerResultContractsContractItems0 `json:"Contract"`
}

// Validate validates this scanner result contracts
func (m *ScannerResultContracts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContract(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScannerResultContracts) validateContract(formats strfmt.Registry) error {

	if swag.IsZero(m.Contract) { // not required
		return nil
	}

	for i := 0; i < len(m.Contract); i++ {
		if swag.IsZero(m.Contract[i]) { // not required
			continue
		}

		if m.Contract[i] != nil {
			if err := m.Contract[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Contracts" + "." + "Contract" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScannerResultContracts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScannerResultContracts) UnmarshalBinary(b []byte) error {
	var res ScannerResultContracts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScannerResultContractsContractItems0 scanner result contracts contract items0
// swagger:model ScannerResultContractsContractItems0
type ScannerResultContractsContractItems0 struct {

	// contract ID
	ContractID int64 `json:"contractID,omitempty"`

	// distance
	Distance int64 `json:"distance,omitempty"`

	// in scan time
	InScanTime string `json:"inScanTime,omitempty"`
}

// Validate validates this scanner result contracts contract items0
func (m *ScannerResultContractsContractItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScannerResultContractsContractItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScannerResultContractsContractItems0) UnmarshalBinary(b []byte) error {
	var res ScannerResultContractsContractItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
