// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// HistoryData history data
// swagger:model history-data
type HistoryData struct {

	// bar length
	BarLength int64 `json:"barLength,omitempty"`

	// data
	Data []*HistoryDataDataItems0 `json:"data"`

	// delay
	Delay int64 `json:"delay,omitempty"`

	// price/volume/...
	High string `json:"high,omitempty"`

	// price/volume/...
	Low string `json:"low,omitempty"`

	// Market Data Availability. The field may contain two chars. The first char is the primary code: R = Realtime, D = Delayed,
	// Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated.
	//
	MdAvailability string `json:"mdAvailability,omitempty"`

	// total number of points
	Points float64 `json:"points,omitempty"`

	// start date time
	Start string `json:"start,omitempty"`

	// symbol
	Symbol string `json:"symbol,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// tick num
	TickNum string `json:"tickNum,omitempty"`

	// time period
	TimePeriod string `json:"timePeriod,omitempty"`

	// travel time
	TravelTime float64 `json:"travelTime,omitempty"`
}

// Validate validates this history data
func (m *HistoryData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistoryData) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoryData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryData) UnmarshalBinary(b []byte) error {
	var res HistoryData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HistoryDataDataItems0 history data data items0
// swagger:model HistoryDataDataItems0
type HistoryDataDataItems0 struct {

	// close price
	C float64 `json:"c,omitempty"`

	// high price
	H float64 `json:"h,omitempty"`

	// low price
	L float64 `json:"l,omitempty"`

	// open price
	O float64 `json:"o,omitempty"`

	// unix time stamp
	T float64 `json:"t,omitempty"`

	// volume
	V float64 `json:"v,omitempty"`
}

// Validate validates this history data data items0
func (m *HistoryDataDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HistoryDataDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryDataDataItems0) UnmarshalBinary(b []byte) error {
	var res HistoryDataDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
