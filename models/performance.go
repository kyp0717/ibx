// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Performance performance
// swagger:model performance
type Performance struct {

	// cps
	Cps *PerformanceCps `json:"cps,omitempty"`

	// currency type
	CurrencyType string `json:"currencyType,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// included
	Included []string `json:"included"`

	// nav
	Nav *PerformanceNav `json:"nav,omitempty"`

	// pm
	Pm string `json:"pm,omitempty"`

	// rc
	Rc int64 `json:"rc,omitempty"`

	// tpps
	Tpps *PerformanceTpps `json:"tpps,omitempty"`
}

// Validate validates this performance
func (m *Performance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNav(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTpps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Performance) validateCps(formats strfmt.Registry) error {

	if swag.IsZero(m.Cps) { // not required
		return nil
	}

	if m.Cps != nil {
		if err := m.Cps.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cps")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validateNav(formats strfmt.Registry) error {

	if swag.IsZero(m.Nav) { // not required
		return nil
	}

	if m.Nav != nil {
		if err := m.Nav.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nav")
			}
			return err
		}
	}

	return nil
}

func (m *Performance) validateTpps(formats strfmt.Registry) error {

	if swag.IsZero(m.Tpps) { // not required
		return nil
	}

	if m.Tpps != nil {
		if err := m.Tpps.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tpps")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Performance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Performance) UnmarshalBinary(b []byte) error {
	var res Performance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceCps Cumulative performance data
// swagger:model PerformanceCps
type PerformanceCps struct {

	// data
	Data []*PerformanceCpsDataItems0 `json:"data"`

	// array of dates, the length should be same as the length of returns inside data.
	Dates []string `json:"dates"`

	// D means Day
	Freq string `json:"freq,omitempty"`
}

// Validate validates this performance cps
func (m *PerformanceCps) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceCps) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cps" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceCps) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceCps) UnmarshalBinary(b []byte) error {
	var res PerformanceCps
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceCpsDataItems0 performance cps data items0
// swagger:model PerformanceCpsDataItems0
type PerformanceCpsDataItems0 struct {

	// base currency
	BaseCurrency string `json:"baseCurrency,omitempty"`

	// end date-- yyyyMMdd
	End string `json:"end,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// for example-- acctid
	IDType string `json:"idType,omitempty"`

	// each value stands for price change percent of corresponding date in dates array
	Returns []float64 `json:"returns"`

	// start date-- yyyyMMdd
	Start string `json:"start,omitempty"`
}

// Validate validates this performance cps data items0
func (m *PerformanceCpsDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceCpsDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceCpsDataItems0) UnmarshalBinary(b []byte) error {
	var res PerformanceCpsDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceNav Net asset value data for the account or consolidated accounts. NAV data is not applicable to benchmarks.
// swagger:model PerformanceNav
type PerformanceNav struct {

	// data
	Data []*PerformanceNavDataItems0 `json:"data"`

	// array of dates, the length should be same as the length of returns inside data.
	Dates []string `json:"dates"`

	// D means Day
	Freq string `json:"freq,omitempty"`
}

// Validate validates this performance nav
func (m *PerformanceNav) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceNav) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nav" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceNav) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceNav) UnmarshalBinary(b []byte) error {
	var res PerformanceNav
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceNavDataItems0 performance nav data items0
// swagger:model PerformanceNavDataItems0
type PerformanceNavDataItems0 struct {

	// base currency
	BaseCurrency string `json:"baseCurrency,omitempty"`

	// end date-- yyyyMMdd
	End string `json:"end,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// for example-- acctid
	IDType string `json:"idType,omitempty"`

	// each value stands for price change percent of corresponding date in dates array
	Returns []float64 `json:"returns"`

	// start date-- yyyyMMdd
	Start string `json:"start,omitempty"`
}

// Validate validates this performance nav data items0
func (m *PerformanceNavDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceNavDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceNavDataItems0) UnmarshalBinary(b []byte) error {
	var res PerformanceNavDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceTpps Time period performance data
// swagger:model PerformanceTpps
type PerformanceTpps struct {

	// data
	Data []*PerformanceTppsDataItems0 `json:"data"`

	// array of dates, the length should be same as the length of returns inside data.
	Dates []string `json:"dates"`

	// M means Month
	Freq string `json:"freq,omitempty"`
}

// Validate validates this performance tpps
func (m *PerformanceTpps) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceTpps) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tpps" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceTpps) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceTpps) UnmarshalBinary(b []byte) error {
	var res PerformanceTpps
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PerformanceTppsDataItems0 performance tpps data items0
// swagger:model PerformanceTppsDataItems0
type PerformanceTppsDataItems0 struct {

	// base currency
	BaseCurrency string `json:"baseCurrency,omitempty"`

	// end date-- yyyyMMdd
	End string `json:"end,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// for example-- acctid
	IDType string `json:"idType,omitempty"`

	// each value stands for price change percent of corresponding date in dates array
	Returns []float64 `json:"returns"`

	// start date-- yyyyMMdd
	Start string `json:"start,omitempty"`
}

// Validate validates this performance tpps data items0
func (m *PerformanceTppsDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceTppsDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceTppsDataItems0) UnmarshalBinary(b []byte) error {
	var res PerformanceTppsDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
