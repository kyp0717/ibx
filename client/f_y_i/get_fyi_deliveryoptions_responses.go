// Code generated by go-swagger; DO NOT EDIT.

package f_y_i

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// GetFyiDeliveryoptionsReader is a Reader for the GetFyiDeliveryoptions structure.
type GetFyiDeliveryoptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFyiDeliveryoptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFyiDeliveryoptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetFyiDeliveryoptionsOK creates a GetFyiDeliveryoptionsOK with default headers values
func NewGetFyiDeliveryoptionsOK() *GetFyiDeliveryoptionsOK {
	return &GetFyiDeliveryoptionsOK{}
}

/*GetFyiDeliveryoptionsOK handles this case with default header values.

An object
*/
type GetFyiDeliveryoptionsOK struct {
	Payload *GetFyiDeliveryoptionsOKBody
}

func (o *GetFyiDeliveryoptionsOK) Error() string {
	return fmt.Sprintf("[GET /fyi/deliveryoptions][%d] getFyiDeliveryoptionsOK  %+v", 200, o.Payload)
}

func (o *GetFyiDeliveryoptionsOK) GetPayload() *GetFyiDeliveryoptionsOKBody {
	return o.Payload
}

func (o *GetFyiDeliveryoptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetFyiDeliveryoptionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*EItems0 device
swagger:model EItems0
*/
type EItems0 struct {

	// device is enabled or not 0-true, 1-false.
	A string `json:"A,omitempty"`

	// device id
	I string `json:"I,omitempty"`

	// device name
	NM string `json:"NM,omitempty"`

	// unique device id
	UI string `json:"UI,omitempty"`
}

// Validate validates this e items0
func (o *EItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EItems0) UnmarshalBinary(b []byte) error {
	var res EItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFyiDeliveryoptionsOKBody get fyi deliveryoptions o k body
swagger:model GetFyiDeliveryoptionsOKBody
*/
type GetFyiDeliveryoptionsOKBody struct {

	// e
	E []*EItems0 `json:"E"`

	// Email option is enabled or not 0-off, 1-on.
	M int64 `json:"M,omitempty"`
}

// Validate validates this get fyi deliveryoptions o k body
func (o *GetFyiDeliveryoptionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateE(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFyiDeliveryoptionsOKBody) validateE(formats strfmt.Registry) error {

	if swag.IsZero(o.E) { // not required
		return nil
	}

	for i := 0; i < len(o.E); i++ {
		if swag.IsZero(o.E[i]) { // not required
			continue
		}

		if o.E[i] != nil {
			if err := o.E[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFyiDeliveryoptionsOK" + "." + "E" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFyiDeliveryoptionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFyiDeliveryoptionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetFyiDeliveryoptionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
