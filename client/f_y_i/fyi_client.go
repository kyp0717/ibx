// Code generated by go-swagger; DO NOT EDIT.

package f_y_i

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new f y i API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for f y i API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFyiDeliveryoptionsDeviceID deletes a device
*/
func (a *Client) DeleteFyiDeliveryoptionsDeviceID(params *DeleteFyiDeliveryoptionsDeviceIDParams) (*DeleteFyiDeliveryoptionsDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFyiDeliveryoptionsDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFyiDeliveryoptionsDeviceID",
		Method:             "DELETE",
		PathPattern:        "/fyi/deliveryoptions/{deviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFyiDeliveryoptionsDeviceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFyiDeliveryoptionsDeviceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteFyiDeliveryoptionsDeviceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFyiDeliveryoptions gets delivery options

options for sending fyis to email and other devices

*/
func (a *Client) GetFyiDeliveryoptions(params *GetFyiDeliveryoptionsParams) (*GetFyiDeliveryoptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFyiDeliveryoptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFyiDeliveryoptions",
		Method:             "GET",
		PathPattern:        "/fyi/deliveryoptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFyiDeliveryoptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFyiDeliveryoptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFyiDeliveryoptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFyiDisclaimerTypecode gets disclaimer for a certain kind of fyi
*/
func (a *Client) GetFyiDisclaimerTypecode(params *GetFyiDisclaimerTypecodeParams) (*GetFyiDisclaimerTypecodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFyiDisclaimerTypecodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFyiDisclaimerTypecode",
		Method:             "GET",
		PathPattern:        "/fyi/disclaimer/{typecode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFyiDisclaimerTypecodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFyiDisclaimerTypecodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFyiDisclaimerTypecode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFyiNotifications gets a list of notifications
*/
func (a *Client) GetFyiNotifications(params *GetFyiNotificationsParams) (*GetFyiNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFyiNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFyiNotifications",
		Method:             "GET",
		PathPattern:        "/fyi/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFyiNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFyiNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFyiNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFyiNotificationsMore gets more notifications based on a certain one
*/
func (a *Client) GetFyiNotificationsMore(params *GetFyiNotificationsMoreParams) (*GetFyiNotificationsMoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFyiNotificationsMoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFyiNotificationsMore",
		Method:             "GET",
		PathPattern:        "/fyi/notifications/more",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFyiNotificationsMoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFyiNotificationsMoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFyiNotificationsMore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFyiSettings gets a list of subscriptions

return the current choices of subscriptions, we can toggle the option

*/
func (a *Client) GetFyiSettings(params *GetFyiSettingsParams) (*GetFyiSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFyiSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFyiSettings",
		Method:             "GET",
		PathPattern:        "/fyi/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFyiSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFyiSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFyiSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFyiUnreadnumber gets unread number of fyis
*/
func (a *Client) GetFyiUnreadnumber(params *GetFyiUnreadnumberParams) (*GetFyiUnreadnumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFyiUnreadnumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFyiUnreadnumber",
		Method:             "GET",
		PathPattern:        "/fyi/unreadnumber",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFyiUnreadnumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFyiUnreadnumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFyiUnreadnumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostFyiDeliveryoptionsDevice enables disable device option
*/
func (a *Client) PostFyiDeliveryoptionsDevice(params *PostFyiDeliveryoptionsDeviceParams) (*PostFyiDeliveryoptionsDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFyiDeliveryoptionsDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFyiDeliveryoptionsDevice",
		Method:             "POST",
		PathPattern:        "/fyi/deliveryoptions/device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFyiDeliveryoptionsDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFyiDeliveryoptionsDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostFyiDeliveryoptionsDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostFyiSettingsTypecode enables disable certain subscription
*/
func (a *Client) PostFyiSettingsTypecode(params *PostFyiSettingsTypecodeParams) (*PostFyiSettingsTypecodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFyiSettingsTypecodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFyiSettingsTypecode",
		Method:             "POST",
		PathPattern:        "/fyi/settings/{typecode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFyiSettingsTypecodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFyiSettingsTypecodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostFyiSettingsTypecode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutFyiDeliveryoptionsEmail enables disable email option
*/
func (a *Client) PutFyiDeliveryoptionsEmail(params *PutFyiDeliveryoptionsEmailParams) (*PutFyiDeliveryoptionsEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFyiDeliveryoptionsEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFyiDeliveryoptionsEmail",
		Method:             "PUT",
		PathPattern:        "/fyi/deliveryoptions/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFyiDeliveryoptionsEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFyiDeliveryoptionsEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutFyiDeliveryoptionsEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutFyiDisclaimerTypecode marks disclaimer read
*/
func (a *Client) PutFyiDisclaimerTypecode(params *PutFyiDisclaimerTypecodeParams) (*PutFyiDisclaimerTypecodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFyiDisclaimerTypecodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFyiDisclaimerTypecode",
		Method:             "PUT",
		PathPattern:        "/fyi/disclaimer/{typecode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFyiDisclaimerTypecodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFyiDisclaimerTypecodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutFyiDisclaimerTypecode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutFyiNotificationsNotificationID gets a list of notifications
*/
func (a *Client) PutFyiNotificationsNotificationID(params *PutFyiNotificationsNotificationIDParams) (*PutFyiNotificationsNotificationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFyiNotificationsNotificationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFyiNotificationsNotificationID",
		Method:             "PUT",
		PathPattern:        "/fyi/notifications/{notificationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFyiNotificationsNotificationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFyiNotificationsNotificationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutFyiNotificationsNotificationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
