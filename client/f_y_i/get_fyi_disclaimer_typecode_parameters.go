// Code generated by go-swagger; DO NOT EDIT.

package f_y_i

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetFyiDisclaimerTypecodeParams creates a new GetFyiDisclaimerTypecodeParams object
// with the default values initialized.
func NewGetFyiDisclaimerTypecodeParams() *GetFyiDisclaimerTypecodeParams {
	var ()
	return &GetFyiDisclaimerTypecodeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFyiDisclaimerTypecodeParamsWithTimeout creates a new GetFyiDisclaimerTypecodeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFyiDisclaimerTypecodeParamsWithTimeout(timeout time.Duration) *GetFyiDisclaimerTypecodeParams {
	var ()
	return &GetFyiDisclaimerTypecodeParams{

		timeout: timeout,
	}
}

// NewGetFyiDisclaimerTypecodeParamsWithContext creates a new GetFyiDisclaimerTypecodeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFyiDisclaimerTypecodeParamsWithContext(ctx context.Context) *GetFyiDisclaimerTypecodeParams {
	var ()
	return &GetFyiDisclaimerTypecodeParams{

		Context: ctx,
	}
}

// NewGetFyiDisclaimerTypecodeParamsWithHTTPClient creates a new GetFyiDisclaimerTypecodeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFyiDisclaimerTypecodeParamsWithHTTPClient(client *http.Client) *GetFyiDisclaimerTypecodeParams {
	var ()
	return &GetFyiDisclaimerTypecodeParams{
		HTTPClient: client,
	}
}

/*GetFyiDisclaimerTypecodeParams contains all the parameters to send to the API endpoint
for the get fyi disclaimer typecode operation typically these are written to a http.Request
*/
type GetFyiDisclaimerTypecodeParams struct {

	/*Typecode
	  fyi code, for example --M8, EA

	*/
	Typecode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get fyi disclaimer typecode params
func (o *GetFyiDisclaimerTypecodeParams) WithTimeout(timeout time.Duration) *GetFyiDisclaimerTypecodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get fyi disclaimer typecode params
func (o *GetFyiDisclaimerTypecodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get fyi disclaimer typecode params
func (o *GetFyiDisclaimerTypecodeParams) WithContext(ctx context.Context) *GetFyiDisclaimerTypecodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get fyi disclaimer typecode params
func (o *GetFyiDisclaimerTypecodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get fyi disclaimer typecode params
func (o *GetFyiDisclaimerTypecodeParams) WithHTTPClient(client *http.Client) *GetFyiDisclaimerTypecodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get fyi disclaimer typecode params
func (o *GetFyiDisclaimerTypecodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTypecode adds the typecode to the get fyi disclaimer typecode params
func (o *GetFyiDisclaimerTypecodeParams) WithTypecode(typecode string) *GetFyiDisclaimerTypecodeParams {
	o.SetTypecode(typecode)
	return o
}

// SetTypecode adds the typecode to the get fyi disclaimer typecode params
func (o *GetFyiDisclaimerTypecodeParams) SetTypecode(typecode string) {
	o.Typecode = typecode
}

// WriteToRequest writes these params to a swagger request
func (o *GetFyiDisclaimerTypecodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param typecode
	if err := r.SetPathParam("typecode", o.Typecode); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
