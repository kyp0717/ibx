// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new session API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for session API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSsoValidate validates s s o
Validates the current session for the SSO user
*/
func (a *Client) GetSsoValidate(params *GetSsoValidateParams) (*GetSsoValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSsoValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSsoValidate",
		Method:             "GET",
		PathPattern:        "/sso/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSsoValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSsoValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSsoValidate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAuthStatus authentications status
Current Authentication status to the Brokerage system.
Market Data and Trading is not possible if not authenticated, e.g. authenticated shows false
*/
func (a *Client) PostAuthStatus(params *PostAuthStatusParams) (*PostAuthStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAuthStatus",
		Method:             "POST",
		PathPattern:        "/iserver/auth/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAuthStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAuthStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReauthenticate tries to re authenticate to brokerage
Provides a way to reauthenticate to the Brokerage system as
long as there is a valid SSO session, see /sso/validate.
*/
func (a *Client) PostReauthenticate(params *PostReauthenticateParams) (*PostReauthenticateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReauthenticateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostReauthenticate",
		Method:             "POST",
		PathPattern:        "/iserver/reauthenticate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostReauthenticateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReauthenticateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReauthenticate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostLogout ends the current session
Logs the user out of the gateway session.
Any further activity requires re-authentication.
*/
func (a *Client) PostLogout(params *PostLogoutParams) (*PostLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLogout",
		Method:             "POST",
		PathPattern:        "/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLogoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostLogout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostTickle pings the server to keep the session open

If the gateway has not received any requests for several minutes an open session will automatically timeout. The tickle endpoint pings the server to prevent the session from ending.
*/
func (a *Client) PostTickle(params *PostTickleParams) (*PostTickleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTickleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTickle",
		Method:             "POST",
		PathPattern:        "/tickle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTickleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTickleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTickle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
