// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new order API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for order API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAccountAccountIDOrderOrigCustomerOrderID deletes order
*/
func (a *Client) DeleteAccountAccountIDOrderOrigCustomerOrderID(params *DeleteAccountAccountIDOrderOrigCustomerOrderIDParams) (*DeleteAccountAccountIDOrderOrigCustomerOrderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountAccountIDOrderOrigCustomerOrderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccountAccountIDOrderOrigCustomerOrderID",
		Method:             "DELETE",
		PathPattern:        "/iserver/account/{accountId}/order/{origCustomerOrderId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountAccountIDOrderOrigCustomerOrderIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccountAccountIDOrderOrigCustomerOrderIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAccountAccountIDOrderOrigCustomerOrderID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccountOrders lives orders

The end-point is meant to be used in polling mode, e.g. requesting every x seconds.
The response will contain two objects, one is notification, the other is orders.
Orders is the list of orders (cancelled, filled, submitted) with activity in the current day.
Notifications contains information about execute orders as they happen, see status field.

*/
func (a *Client) GetAccountOrders(params *GetAccountOrdersParams) (*GetAccountOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountOrders",
		Method:             "GET",
		PathPattern:        "/iserver/account/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAccountOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAccountAccountIDOrder places order

Please note here, sometimes this end-point alone can't make sure you submit the order successfully,
you could receive some questions in the response, you have to to answer them in order to submit the order
successfully. You can use "/iserver/reply/{replyid}" end-point to answer questions

*/
func (a *Client) PostAccountAccountIDOrder(params *PostAccountAccountIDOrderParams) (*PostAccountAccountIDOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountAccountIDOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountAccountIDOrder",
		Method:             "POST",
		PathPattern:        "/iserver/account/{accountId}/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountAccountIDOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountAccountIDOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAccountAccountIDOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAccountAccountIDOrderOrigCustomerOrderID modifies order

Modifies an open order. The /iserver/accounts endpoint must first be called.
*/
func (a *Client) PostAccountAccountIDOrderOrigCustomerOrderID(params *PostAccountAccountIDOrderOrigCustomerOrderIDParams) (*PostAccountAccountIDOrderOrigCustomerOrderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountAccountIDOrderOrigCustomerOrderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountAccountIDOrderOrigCustomerOrderID",
		Method:             "POST",
		PathPattern:        "/iserver/account/{accountId}/order/{origCustomerOrderId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountAccountIDOrderOrigCustomerOrderIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountAccountIDOrderOrigCustomerOrderIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAccountAccountIDOrderOrigCustomerOrderID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAccountAccountIDOrderWhatif previews order

This end-point allows you to preview order without actually submitting the order and you can get
commission information in the response.

*/
func (a *Client) PostAccountAccountIDOrderWhatif(params *PostAccountAccountIDOrderWhatifParams) (*PostAccountAccountIDOrderWhatifOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountAccountIDOrderWhatifParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountAccountIDOrderWhatif",
		Method:             "POST",
		PathPattern:        "/iserver/account/{accountId}/order/whatif",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountAccountIDOrderWhatifReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountAccountIDOrderWhatifOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAccountAccountIDOrderWhatif: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAccountAccountIDOrders places orders support bracket orders

You can pass a list of orders here

*/
func (a *Client) PostAccountAccountIDOrders(params *PostAccountAccountIDOrdersParams) (*PostAccountAccountIDOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountAccountIDOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountAccountIDOrders",
		Method:             "POST",
		PathPattern:        "/iserver/account/{accountId}/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountAccountIDOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountAccountIDOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAccountAccountIDOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReplyReplyid places order reply

Reply to questions when placing orders and submit orders
*/
func (a *Client) PostReplyReplyid(params *PostReplyReplyidParams) (*PostReplyReplyidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReplyReplyidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostReplyReplyid",
		Method:             "POST",
		PathPattern:        "/iserver/reply/{replyid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostReplyReplyidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReplyReplyidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReplyReplyid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
