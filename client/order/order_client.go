// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new order API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for order API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteIserverAccountAccountIDOrderOrigCustomerOrderID deletes order
*/
func (a *Client) DeleteIserverAccountAccountIDOrderOrigCustomerOrderID(params *DeleteIserverAccountAccountIDOrderOrigCustomerOrderIDParams) (*DeleteIserverAccountAccountIDOrderOrigCustomerOrderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIserverAccountAccountIDOrderOrigCustomerOrderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIserverAccountAccountIDOrderOrigCustomerOrderID",
		Method:             "DELETE",
		PathPattern:        "/iserver/account/{accountId}/order/{origCustomerOrderId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIserverAccountAccountIDOrderOrigCustomerOrderIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIserverAccountAccountIDOrderOrigCustomerOrderIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteIserverAccountAccountIDOrderOrigCustomerOrderID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIserverAccountOrders lives orders

The end-point is meant to be used in polling mode, e.g. requesting every x seconds.
The response will contain two objects, one is notification, the other is orders.
Orders is the list of orders (cancelled, filled, submitted) with activity in the current day.
Notifications contains information about execute orders as they happen, see status field.

*/
func (a *Client) GetIserverAccountOrders(params *GetIserverAccountOrdersParams) (*GetIserverAccountOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIserverAccountOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIserverAccountOrders",
		Method:             "GET",
		PathPattern:        "/iserver/account/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIserverAccountOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIserverAccountOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIserverAccountOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostIserverAccountAccountIDOrder places order

Please note here, sometimes this end-point alone can't make sure you submit the order successfully,
you could receive some questions in the response, you have to to answer them in order to submit the order
successfully. You can use "/iserver/reply/{replyid}" end-point to answer questions

*/
func (a *Client) PostIserverAccountAccountIDOrder(params *PostIserverAccountAccountIDOrderParams) (*PostIserverAccountAccountIDOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIserverAccountAccountIDOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIserverAccountAccountIDOrder",
		Method:             "POST",
		PathPattern:        "/iserver/account/{accountId}/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIserverAccountAccountIDOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIserverAccountAccountIDOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostIserverAccountAccountIDOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostIserverAccountAccountIDOrderOrigCustomerOrderID modifies order

Modifies an open order. The /iserver/accounts endpoint must first be called.
*/
func (a *Client) PostIserverAccountAccountIDOrderOrigCustomerOrderID(params *PostIserverAccountAccountIDOrderOrigCustomerOrderIDParams) (*PostIserverAccountAccountIDOrderOrigCustomerOrderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIserverAccountAccountIDOrderOrigCustomerOrderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIserverAccountAccountIDOrderOrigCustomerOrderID",
		Method:             "POST",
		PathPattern:        "/iserver/account/{accountId}/order/{origCustomerOrderId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIserverAccountAccountIDOrderOrigCustomerOrderIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIserverAccountAccountIDOrderOrigCustomerOrderIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostIserverAccountAccountIDOrderOrigCustomerOrderID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostIserverAccountAccountIDOrderWhatif previews order

This end-point allows you to preview order without actually submitting the order and you can get
commission information in the response.

*/
func (a *Client) PostIserverAccountAccountIDOrderWhatif(params *PostIserverAccountAccountIDOrderWhatifParams) (*PostIserverAccountAccountIDOrderWhatifOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIserverAccountAccountIDOrderWhatifParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIserverAccountAccountIDOrderWhatif",
		Method:             "POST",
		PathPattern:        "/iserver/account/{accountId}/order/whatif",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIserverAccountAccountIDOrderWhatifReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIserverAccountAccountIDOrderWhatifOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostIserverAccountAccountIDOrderWhatif: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostIserverAccountAccountIDOrders places orders support bracket orders

You can pass a list of orders here

*/
func (a *Client) PostIserverAccountAccountIDOrders(params *PostIserverAccountAccountIDOrdersParams) (*PostIserverAccountAccountIDOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIserverAccountAccountIDOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIserverAccountAccountIDOrders",
		Method:             "POST",
		PathPattern:        "/iserver/account/{accountId}/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIserverAccountAccountIDOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIserverAccountAccountIDOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostIserverAccountAccountIDOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostIserverReplyReplyid places order reply

Reply to questions when placing orders and submit orders
*/
func (a *Client) PostIserverReplyReplyid(params *PostIserverReplyReplyidParams) (*PostIserverReplyReplyidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIserverReplyReplyidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIserverReplyReplyid",
		Method:             "POST",
		PathPattern:        "/iserver/reply/{replyid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIserverReplyReplyidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIserverReplyReplyidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostIserverReplyReplyid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
