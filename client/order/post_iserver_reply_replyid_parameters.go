// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostReplyReplyidParams creates a new PostReplyReplyidParams object
// with the default values initialized.
func NewPostReplyReplyidParams() *PostReplyReplyidParams {
	var ()
	return &PostReplyReplyidParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostReplyReplyidParamsWithTimeout creates a new PostReplyReplyidParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostReplyReplyidParamsWithTimeout(timeout time.Duration) *PostReplyReplyidParams {
	var ()
	return &PostReplyReplyidParams{

		timeout: timeout,
	}
}

// NewPostReplyReplyidParamsWithContext creates a new PostReplyReplyidParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostReplyReplyidParamsWithContext(ctx context.Context) *PostReplyReplyidParams {
	var ()
	return &PostReplyReplyidParams{

		Context: ctx,
	}
}

// NewPostReplyReplyidParamsWithHTTPClient creates a new PostReplyReplyidParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostReplyReplyidParamsWithHTTPClient(client *http.Client) *PostReplyReplyidParams {
	var ()
	return &PostReplyReplyidParams{
		HTTPClient: client,
	}
}

/*PostReplyReplyidParams contains all the parameters to send to the API endpoint
for the post iserver reply replyid operation typically these are written to a http.Request
*/
type PostReplyReplyidParams struct {

	/*Body
	  Answer to question

	*/
	Body PostReplyReplyidBody
	/*Replyid
	  Please use the "id" from the response of "Place Order" end-point

	*/
	Replyid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post iserver reply replyid params
func (o *PostReplyReplyidParams) WithTimeout(timeout time.Duration) *PostReplyReplyidParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post iserver reply replyid params
func (o *PostReplyReplyidParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post iserver reply replyid params
func (o *PostReplyReplyidParams) WithContext(ctx context.Context) *PostReplyReplyidParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post iserver reply replyid params
func (o *PostReplyReplyidParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post iserver reply replyid params
func (o *PostReplyReplyidParams) WithHTTPClient(client *http.Client) *PostReplyReplyidParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post iserver reply replyid params
func (o *PostReplyReplyidParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post iserver reply replyid params
func (o *PostReplyReplyidParams) WithBody(body PostReplyReplyidBody) *PostReplyReplyidParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post iserver reply replyid params
func (o *PostReplyReplyidParams) SetBody(body PostReplyReplyidBody) {
	o.Body = body
}

// WithReplyid adds the replyid to the post iserver reply replyid params
func (o *PostReplyReplyidParams) WithReplyid(replyid string) *PostReplyReplyidParams {
	o.SetReplyid(replyid)
	return o
}

// SetReplyid adds the replyid to the post iserver reply replyid params
func (o *PostReplyReplyidParams) SetReplyid(replyid string) {
	o.Replyid = replyid
}

// WriteToRequest writes these params to a swagger request
func (o *PostReplyReplyidParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param replyid
	if err := r.SetPathParam("replyid", o.Replyid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
