// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// PostIserverReplyReplyidReader is a Reader for the PostIserverReplyReplyid structure.
type PostIserverReplyReplyidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostIserverReplyReplyidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostIserverReplyReplyidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostIserverReplyReplyidBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostIserverReplyReplyidOK creates a PostIserverReplyReplyidOK with default headers values
func NewPostIserverReplyReplyidOK() *PostIserverReplyReplyidOK {
	return &PostIserverReplyReplyidOK{}
}

/*PostIserverReplyReplyidOK handles this case with default header values.

Order is submitted successfully, returns an array contains one object
*/
type PostIserverReplyReplyidOK struct {
	Payload []*PostIserverReplyReplyidOKBodyItems0
}

func (o *PostIserverReplyReplyidOK) Error() string {
	return fmt.Sprintf("[POST /iserver/reply/{replyid}][%d] postIserverReplyReplyidOK  %+v", 200, o.Payload)
}

func (o *PostIserverReplyReplyidOK) GetPayload() []*PostIserverReplyReplyidOKBodyItems0 {
	return o.Payload
}

func (o *PostIserverReplyReplyidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIserverReplyReplyidBadRequest creates a PostIserverReplyReplyidBadRequest with default headers values
func NewPostIserverReplyReplyidBadRequest() *PostIserverReplyReplyidBadRequest {
	return &PostIserverReplyReplyidBadRequest{}
}

/*PostIserverReplyReplyidBadRequest handles this case with default header values.

When you send "confirmed-false" in the request, you will receive this
*/
type PostIserverReplyReplyidBadRequest struct {
	Payload *PostIserverReplyReplyidBadRequestBody
}

func (o *PostIserverReplyReplyidBadRequest) Error() string {
	return fmt.Sprintf("[POST /iserver/reply/{replyid}][%d] postIserverReplyReplyidBadRequest  %+v", 400, o.Payload)
}

func (o *PostIserverReplyReplyidBadRequest) GetPayload() *PostIserverReplyReplyidBadRequestBody {
	return o.Payload
}

func (o *PostIserverReplyReplyidBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostIserverReplyReplyidBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostIserverReplyReplyidBadRequestBody post iserver reply replyid bad request body
swagger:model PostIserverReplyReplyidBadRequestBody
*/
type PostIserverReplyReplyidBadRequestBody struct {

	// for example-order not confirmed
	Error string `json:"error,omitempty"`

	// status code
	StatusCode int64 `json:"statusCode,omitempty"`
}

// Validate validates this post iserver reply replyid bad request body
func (o *PostIserverReplyReplyidBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostIserverReplyReplyidBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostIserverReplyReplyidBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostIserverReplyReplyidBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostIserverReplyReplyidBody post iserver reply replyid body
swagger:model PostIserverReplyReplyidBody
*/
type PostIserverReplyReplyidBody struct {

	// answer to question, true means yes, false means no
	Confirmed bool `json:"confirmed,omitempty"`
}

// Validate validates this post iserver reply replyid body
func (o *PostIserverReplyReplyidBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostIserverReplyReplyidBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostIserverReplyReplyidBody) UnmarshalBinary(b []byte) error {
	var res PostIserverReplyReplyidBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostIserverReplyReplyidOKBodyItems0 post iserver reply replyid o k body items0
swagger:model PostIserverReplyReplyidOKBodyItems0
*/
type PostIserverReplyReplyidOKBodyItems0 struct {

	// local order id
	LocalOrderID string `json:"local_order_id,omitempty"`

	// order id
	OrderID string `json:"order_id,omitempty"`

	// order status
	OrderStatus string `json:"order_status,omitempty"`
}

// Validate validates this post iserver reply replyid o k body items0
func (o *PostIserverReplyReplyidOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostIserverReplyReplyidOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostIserverReplyReplyidOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res PostIserverReplyReplyidOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
