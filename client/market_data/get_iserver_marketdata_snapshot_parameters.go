// Code generated by go-swagger; DO NOT EDIT.

package market_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIserverMarketdataSnapshotParams creates a new GetIserverMarketdataSnapshotParams object
// with the default values initialized.
func NewGetIserverMarketdataSnapshotParams() *GetIserverMarketdataSnapshotParams {
	var ()
	return &GetIserverMarketdataSnapshotParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIserverMarketdataSnapshotParamsWithTimeout creates a new GetIserverMarketdataSnapshotParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIserverMarketdataSnapshotParamsWithTimeout(timeout time.Duration) *GetIserverMarketdataSnapshotParams {
	var ()
	return &GetIserverMarketdataSnapshotParams{

		timeout: timeout,
	}
}

// NewGetIserverMarketdataSnapshotParamsWithContext creates a new GetIserverMarketdataSnapshotParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIserverMarketdataSnapshotParamsWithContext(ctx context.Context) *GetIserverMarketdataSnapshotParams {
	var ()
	return &GetIserverMarketdataSnapshotParams{

		Context: ctx,
	}
}

// NewGetIserverMarketdataSnapshotParamsWithHTTPClient creates a new GetIserverMarketdataSnapshotParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIserverMarketdataSnapshotParamsWithHTTPClient(client *http.Client) *GetIserverMarketdataSnapshotParams {
	var ()
	return &GetIserverMarketdataSnapshotParams{
		HTTPClient: client,
	}
}

/*GetIserverMarketdataSnapshotParams contains all the parameters to send to the API endpoint
for the get iserver marketdata snapshot operation typically these are written to a http.Request
*/
type GetIserverMarketdataSnapshotParams struct {

	/*Conids
	  list of conids separated by comma

	*/
	Conids string
	/*Fields
	  list of fields separated by comma

	*/
	Fields *string
	/*Since
	  time period since which updates are required. uses epoch time with milliseconds.

	*/
	Since *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) WithTimeout(timeout time.Duration) *GetIserverMarketdataSnapshotParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) WithContext(ctx context.Context) *GetIserverMarketdataSnapshotParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) WithHTTPClient(client *http.Client) *GetIserverMarketdataSnapshotParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConids adds the conids to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) WithConids(conids string) *GetIserverMarketdataSnapshotParams {
	o.SetConids(conids)
	return o
}

// SetConids adds the conids to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) SetConids(conids string) {
	o.Conids = conids
}

// WithFields adds the fields to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) WithFields(fields *string) *GetIserverMarketdataSnapshotParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithSince adds the since to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) WithSince(since *int64) *GetIserverMarketdataSnapshotParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get iserver marketdata snapshot params
func (o *GetIserverMarketdataSnapshotParams) SetSince(since *int64) {
	o.Since = since
}

// WriteToRequest writes these params to a swagger request
func (o *GetIserverMarketdataSnapshotParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param conids
	qrConids := o.Conids
	qConids := qrConids
	if qConids != "" {
		if err := r.SetQueryParam("conids", qConids); err != nil {
			return err
		}
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Since != nil {

		// query param since
		var qrSince int64
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := swag.FormatInt64(qrSince)
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
