// Code generated by go-swagger; DO NOT EDIT.

package market_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new market data API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for market data API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetIserverMarketdataHistory markets data history

Get history of market Data for the given conid, length of data is controlled by period and bar. e.g. 1y period with bar =1w returns 52 data points
*/
func (a *Client) GetIserverMarketdataHistory(params *GetIserverMarketdataHistoryParams) (*GetIserverMarketdataHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIserverMarketdataHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIserverMarketdataHistory",
		Method:             "GET",
		PathPattern:        "/iserver/marketdata/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIserverMarketdataHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIserverMarketdataHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIserverMarketdataHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIserverMarketdataSnapshot markets data

Get Market Data for the given conid(s). The end-point will return by default bid, ask, last, change, change pct, close, listing exchange.
See response fields for a list of available fields that can be request via fields argument.
The endpoint /iserver/accounts should be called prior to /iserver/marketdata/snapshot.
To receive all available fields the /snapshot endpoint will need to be called several times.

*/
func (a *Client) GetIserverMarketdataSnapshot(params *GetIserverMarketdataSnapshotParams) (*GetIserverMarketdataSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIserverMarketdataSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIserverMarketdataSnapshot",
		Method:             "GET",
		PathPattern:        "/iserver/marketdata/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIserverMarketdataSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIserverMarketdataSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIserverMarketdataSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
