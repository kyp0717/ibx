// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "learn2/models"
)

// GetPortfolioAccountIDSummaryReader is a Reader for the GetPortfolioAccountIDSummary structure.
type GetPortfolioAccountIDSummaryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPortfolioAccountIDSummaryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPortfolioAccountIDSummaryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPortfolioAccountIDSummaryOK creates a GetPortfolioAccountIDSummaryOK with default headers values
func NewGetPortfolioAccountIDSummaryOK() *GetPortfolioAccountIDSummaryOK {
	return &GetPortfolioAccountIDSummaryOK{}
}

/*GetPortfolioAccountIDSummaryOK handles this case with default header values.

returns an object containing account summary. The object contains multiple properties. A property is sufficed with -c if its provides commodity value, -s if it provides security value and -c if its UKL segment value
*/
type GetPortfolioAccountIDSummaryOK struct {
	Payload *GetPortfolioAccountIDSummaryOKBody
}

func (o *GetPortfolioAccountIDSummaryOK) Error() string {
	return fmt.Sprintf("[GET /portfolio/{accountId}/summary][%d] getPortfolioAccountIdSummaryOK  %+v", 200, o.Payload)
}

func (o *GetPortfolioAccountIDSummaryOK) GetPayload() *GetPortfolioAccountIDSummaryOKBody {
	return o.Payload
}

func (o *GetPortfolioAccountIDSummaryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPortfolioAccountIDSummaryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPortfolioAccountIDSummaryOKBody get portfolio account ID summary o k body
swagger:model GetPortfolioAccountIDSummaryOKBody
*/
type GetPortfolioAccountIDSummaryOKBody struct {

	// accountready
	Accountready *models.Summary `json:"accountready,omitempty"`

	// accounttype
	Accounttype *models.Summary `json:"accounttype,omitempty"`

	// accruedcash
	Accruedcash *models.Summary `json:"accruedcash,omitempty"`

	// accruedcash c
	Accruedcashc *models.Summary `json:"accruedcash-c,omitempty"`

	// accruedcash f
	Accruedcashf *models.Summary `json:"accruedcash-f,omitempty"`

	// accruedcash s
	Accruedcashs *models.Summary `json:"accruedcash-s,omitempty"`

	// accrueddividend
	Accrueddividend *models.Summary `json:"accrueddividend,omitempty"`

	// accrueddividend c
	Accrueddividendc *models.Summary `json:"accrueddividend-c,omitempty"`

	// accrueddividend f
	Accrueddividendf *models.Summary `json:"accrueddividend-f,omitempty"`

	// accrueddividend s
	Accrueddividends *models.Summary `json:"accrueddividend-s,omitempty"`

	// availablefunds
	Availablefunds *models.Summary `json:"availablefunds,omitempty"`

	// availablefunds c
	Availablefundsc *models.Summary `json:"availablefunds-c,omitempty"`

	// availablefunds f
	Availablefundsf *models.Summary `json:"availablefunds-f,omitempty"`

	// availablefunds s
	Availablefundss *models.Summary `json:"availablefunds-s,omitempty"`

	// billable
	Billable *models.Summary `json:"billable,omitempty"`

	// billable c
	Billablec *models.Summary `json:"billable-c,omitempty"`

	// billable f
	Billablef *models.Summary `json:"billable-f,omitempty"`

	// billable s
	Billables *models.Summary `json:"billable-s,omitempty"`

	// buyingpower
	Buyingpower *models.Summary `json:"buyingpower,omitempty"`

	// cushion
	Cushion *models.Summary `json:"cushion,omitempty"`

	// daytradesremaining
	Daytradesremaining *models.Summary `json:"daytradesremaining,omitempty"`

	// daytradesremainingt 1
	Daytradesremainingt1 *models.Summary `json:"daytradesremainingt+1,omitempty"`

	// daytradesremainingt 2
	Daytradesremainingt2 *models.Summary `json:"daytradesremainingt+2,omitempty"`

	// daytradesremainingt 3
	Daytradesremainingt3 *models.Summary `json:"daytradesremainingt+3,omitempty"`

	// daytradesremainingt 4
	Daytradesremainingt4 *models.Summary `json:"daytradesremainingt+4,omitempty"`

	// equitywithloanvalue
	Equitywithloanvalue *models.Summary `json:"equitywithloanvalue,omitempty"`

	// equitywithloanvalue c
	Equitywithloanvaluec *models.Summary `json:"equitywithloanvalue-c,omitempty"`

	// equitywithloanvalue f
	Equitywithloanvaluef *models.Summary `json:"equitywithloanvalue-f,omitempty"`

	// equitywithloanvalue s
	Equitywithloanvalues *models.Summary `json:"equitywithloanvalue-s,omitempty"`

	// excessliquidity
	Excessliquidity *models.Summary `json:"excessliquidity,omitempty"`

	// excessliquidity c
	Excessliquidityc *models.Summary `json:"excessliquidity-c,omitempty"`

	// excessliquidity f
	Excessliquidityf *models.Summary `json:"excessliquidity-f,omitempty"`

	// excessliquidity s
	Excessliquiditys *models.Summary `json:"excessliquidity-s,omitempty"`

	// fullavailablefunds
	Fullavailablefunds *models.Summary `json:"fullavailablefunds,omitempty"`

	// fullavailablefunds c
	Fullavailablefundsc *models.Summary `json:"fullavailablefunds-c,omitempty"`

	// fullavailablefunds f
	Fullavailablefundsf *models.Summary `json:"fullavailablefunds-f,omitempty"`

	// fullavailablefunds s
	Fullavailablefundss *models.Summary `json:"fullavailablefunds-s,omitempty"`

	// fullexcessliquidity
	Fullexcessliquidity *models.Summary `json:"fullexcessliquidity,omitempty"`

	// fullexcessliquidity c
	Fullexcessliquidityc *models.Summary `json:"fullexcessliquidity-c,omitempty"`

	// fullexcessliquidity f
	Fullexcessliquidityf *models.Summary `json:"fullexcessliquidity-f,omitempty"`

	// fullexcessliquidity s
	Fullexcessliquiditys *models.Summary `json:"fullexcessliquidity-s,omitempty"`

	// fullinitmarginreq
	Fullinitmarginreq *models.Summary `json:"fullinitmarginreq,omitempty"`

	// fullinitmarginreq c
	Fullinitmarginreqc *models.Summary `json:"fullinitmarginreq-c,omitempty"`

	// fullinitmarginreq f
	Fullinitmarginreqf *models.Summary `json:"fullinitmarginreq-f,omitempty"`

	// fullinitmarginreq s
	Fullinitmarginreqs *models.Summary `json:"fullinitmarginreq-s,omitempty"`

	// fullmaintmarginreq
	Fullmaintmarginreq *models.Summary `json:"fullmaintmarginreq,omitempty"`

	// fullmaintmarginreq c
	Fullmaintmarginreqc *models.Summary `json:"fullmaintmarginreq-c,omitempty"`

	// fullmaintmarginreq f
	Fullmaintmarginreqf *models.Summary `json:"fullmaintmarginreq-f,omitempty"`

	// fullmaintmarginreq s
	Fullmaintmarginreqs *models.Summary `json:"fullmaintmarginreq-s,omitempty"`

	// grosspositionvalue
	Grosspositionvalue *models.Summary `json:"grosspositionvalue,omitempty"`

	// grosspositionvalue c
	Grosspositionvaluec *models.Summary `json:"grosspositionvalue-c,omitempty"`

	// grosspositionvalue f
	Grosspositionvaluef *models.Summary `json:"grosspositionvalue-f,omitempty"`

	// grosspositionvalue s
	Grosspositionvalues *models.Summary `json:"grosspositionvalue-s,omitempty"`

	// guarantee
	Guarantee *models.Summary `json:"guarantee,omitempty"`

	// guarantee c
	Guaranteec *models.Summary `json:"guarantee-c,omitempty"`

	// guarantee f
	Guaranteef *models.Summary `json:"guarantee-f,omitempty"`

	// guarantee s
	Guarantees *models.Summary `json:"guarantee-s,omitempty"`

	// highestseverity
	Highestseverity *models.Summary `json:"highestseverity,omitempty"`

	// highestseverity c
	Highestseverityc *models.Summary `json:"highestseverity-c,omitempty"`

	// highestseverity f
	Highestseverityf *models.Summary `json:"highestseverity-f,omitempty"`

	// highestseverity s
	Highestseveritys *models.Summary `json:"highestseverity-s,omitempty"`

	// indianstockhaircut
	Indianstockhaircut *models.Summary `json:"indianstockhaircut,omitempty"`

	// indianstockhaircut c
	Indianstockhaircutc *models.Summary `json:"indianstockhaircut-c,omitempty"`

	// indianstockhaircut f
	Indianstockhaircutf *models.Summary `json:"indianstockhaircut-f,omitempty"`

	// indianstockhaircut s
	Indianstockhaircuts *models.Summary `json:"indianstockhaircut-s,omitempty"`

	// initmarginreq
	Initmarginreq *models.Summary `json:"initmarginreq,omitempty"`

	// initmarginreq c
	Initmarginreqc *models.Summary `json:"initmarginreq-c,omitempty"`

	// initmarginreq f
	Initmarginreqf *models.Summary `json:"initmarginreq-f,omitempty"`

	// initmarginreq s
	Initmarginreqs *models.Summary `json:"initmarginreq-s,omitempty"`

	// leverage
	Leverage *models.Summary `json:"leverage,omitempty"`

	// leverage c
	Leveragec *models.Summary `json:"leverage-c,omitempty"`

	// leverage f
	Leveragef *models.Summary `json:"leverage-f,omitempty"`

	// leverage s
	Leverages *models.Summary `json:"leverage-s,omitempty"`

	// lookaheadavailablefunds
	Lookaheadavailablefunds *models.Summary `json:"lookaheadavailablefunds,omitempty"`

	// lookaheadavailablefunds c
	Lookaheadavailablefundsc *models.Summary `json:"lookaheadavailablefunds-c,omitempty"`

	// lookaheadavailablefunds f
	Lookaheadavailablefundsf *models.Summary `json:"lookaheadavailablefunds-f,omitempty"`

	// lookaheadavailablefunds s
	Lookaheadavailablefundss *models.Summary `json:"lookaheadavailablefunds-s,omitempty"`

	// lookaheadexcessliquidity
	Lookaheadexcessliquidity *models.Summary `json:"lookaheadexcessliquidity,omitempty"`

	// lookaheadexcessliquidity c
	Lookaheadexcessliquidityc *models.Summary `json:"lookaheadexcessliquidity-c,omitempty"`

	// lookaheadexcessliquidity f
	Lookaheadexcessliquidityf *models.Summary `json:"lookaheadexcessliquidity-f,omitempty"`

	// lookaheadexcessliquidity s
	Lookaheadexcessliquiditys *models.Summary `json:"lookaheadexcessliquidity-s,omitempty"`

	// lookaheadinitmarginreq
	Lookaheadinitmarginreq *models.Summary `json:"lookaheadinitmarginreq,omitempty"`

	// lookaheadinitmarginreq c
	Lookaheadinitmarginreqc *models.Summary `json:"lookaheadinitmarginreq-c,omitempty"`

	// lookaheadinitmarginreq f
	Lookaheadinitmarginreqf *models.Summary `json:"lookaheadinitmarginreq-f,omitempty"`

	// lookaheadinitmarginreq s
	Lookaheadinitmarginreqs *models.Summary `json:"lookaheadinitmarginreq-s,omitempty"`

	// lookaheadmaintmarginreq
	Lookaheadmaintmarginreq *models.Summary `json:"lookaheadmaintmarginreq,omitempty"`

	// lookaheadmaintmarginreq c
	Lookaheadmaintmarginreqc *models.Summary `json:"lookaheadmaintmarginreq-c,omitempty"`

	// lookaheadmaintmarginreq f
	Lookaheadmaintmarginreqf *models.Summary `json:"lookaheadmaintmarginreq-f,omitempty"`

	// lookaheadmaintmarginreq s
	Lookaheadmaintmarginreqs *models.Summary `json:"lookaheadmaintmarginreq-s,omitempty"`

	// lookaheadnextchange
	Lookaheadnextchange *models.Summary `json:"lookaheadnextchange,omitempty"`

	// maintmarginreq
	Maintmarginreq *models.Summary `json:"maintmarginreq,omitempty"`

	// maintmarginreq c
	Maintmarginreqc *models.Summary `json:"maintmarginreq-c,omitempty"`

	// maintmarginreq f
	Maintmarginreqf *models.Summary `json:"maintmarginreq-f,omitempty"`

	// maintmarginreq s
	Maintmarginreqs *models.Summary `json:"maintmarginreq-s,omitempty"`

	// netliquidation
	Netliquidation *models.Summary `json:"netliquidation,omitempty"`

	// netliquidation c
	Netliquidationc *models.Summary `json:"netliquidation-c,omitempty"`

	// netliquidation f
	Netliquidationf *models.Summary `json:"netliquidation-f,omitempty"`

	// netliquidation s
	Netliquidations *models.Summary `json:"netliquidation-s,omitempty"`

	// netliquidationuncertainty
	Netliquidationuncertainty *models.Summary `json:"netliquidationuncertainty,omitempty"`

	// nlvandmargininreview
	Nlvandmargininreview *models.Summary `json:"nlvandmargininreview,omitempty"`

	// pasharesvalue
	Pasharesvalue *models.Summary `json:"pasharesvalue,omitempty"`

	// pasharesvalue c
	Pasharesvaluec *models.Summary `json:"pasharesvalue-c,omitempty"`

	// pasharesvalue f
	Pasharesvaluef *models.Summary `json:"pasharesvalue-f,omitempty"`

	// pasharesvalue s
	Pasharesvalues *models.Summary `json:"pasharesvalue-s,omitempty"`

	// postexpirationexcess
	Postexpirationexcess *models.Summary `json:"postexpirationexcess,omitempty"`

	// postexpirationexcess c
	Postexpirationexcessc *models.Summary `json:"postexpirationexcess-c,omitempty"`

	// postexpirationexcess f
	Postexpirationexcessf *models.Summary `json:"postexpirationexcess-f,omitempty"`

	// postexpirationexcess s
	Postexpirationexcesss *models.Summary `json:"postexpirationexcess-s,omitempty"`

	// postexpirationmargin
	Postexpirationmargin *models.Summary `json:"postexpirationmargin,omitempty"`

	// postexpirationmargin c
	Postexpirationmarginc *models.Summary `json:"postexpirationmargin-c,omitempty"`

	// postexpirationmargin f
	Postexpirationmarginf *models.Summary `json:"postexpirationmargin-f,omitempty"`

	// postexpirationmargin s
	Postexpirationmargins *models.Summary `json:"postexpirationmargin-s,omitempty"`

	// previousdayequitywithloanvalue
	Previousdayequitywithloanvalue *models.Summary `json:"previousdayequitywithloanvalue,omitempty"`

	// previousdayequitywithloanvalue c
	Previousdayequitywithloanvaluec *models.Summary `json:"previousdayequitywithloanvalue-c,omitempty"`

	// previousdayequitywithloanvalue f
	Previousdayequitywithloanvaluef *models.Summary `json:"previousdayequitywithloanvalue-f,omitempty"`

	// previousdayequitywithloanvalue s
	Previousdayequitywithloanvalues *models.Summary `json:"previousdayequitywithloanvalue-s,omitempty"`

	// segmenttitle c
	Segmenttitlec *models.Summary `json:"segmenttitle-c,omitempty"`

	// segmenttitle f
	Segmenttitlef *models.Summary `json:"segmenttitle-f,omitempty"`

	// segmenttitle s
	Segmenttitles *models.Summary `json:"segmenttitle-s,omitempty"`

	// totalcashvalue
	Totalcashvalue *models.Summary `json:"totalcashvalue,omitempty"`

	// totalcashvalue c
	Totalcashvaluec *models.Summary `json:"totalcashvalue-c,omitempty"`

	// totalcashvalue f
	Totalcashvaluef *models.Summary `json:"totalcashvalue-f,omitempty"`

	// totalcashvalue s
	Totalcashvalues *models.Summary `json:"totalcashvalue-s,omitempty"`

	// totaldebitcardpendingcharges
	Totaldebitcardpendingcharges *models.Summary `json:"totaldebitcardpendingcharges,omitempty"`

	// totaldebitcardpendingcharges c
	Totaldebitcardpendingchargesc *models.Summary `json:"totaldebitcardpendingcharges-c,omitempty"`

	// totaldebitcardpendingcharges f
	Totaldebitcardpendingchargesf *models.Summary `json:"totaldebitcardpendingcharges-f,omitempty"`

	// totaldebitcardpendingcharges s
	Totaldebitcardpendingchargess *models.Summary `json:"totaldebitcardpendingcharges-s,omitempty"`

	// tradingtype f
	Tradingtypef *models.Summary `json:"tradingtype-f,omitempty"`

	// tradingtype s
	Tradingtypes *models.Summary `json:"tradingtype-s,omitempty"`
}

// Validate validates this get portfolio account ID summary o k body
func (o *GetPortfolioAccountIDSummaryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountready(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccounttype(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccruedcash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccruedcashc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccruedcashf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccruedcashs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccrueddividend(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccrueddividendc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccrueddividendf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccrueddividends(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAvailablefunds(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAvailablefundsc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAvailablefundsf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAvailablefundss(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillablec(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillablef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillables(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyingpower(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCushion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDaytradesremaining(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDaytradesremainingt1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDaytradesremainingt2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDaytradesremainingt3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDaytradesremainingt4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEquitywithloanvalue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEquitywithloanvaluec(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEquitywithloanvaluef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEquitywithloanvalues(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExcessliquidity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExcessliquidityc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExcessliquidityf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExcessliquiditys(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullavailablefunds(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullavailablefundsc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullavailablefundsf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullavailablefundss(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullexcessliquidity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullexcessliquidityc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullexcessliquidityf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullexcessliquiditys(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullinitmarginreq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullinitmarginreqc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullinitmarginreqf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullinitmarginreqs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullmaintmarginreq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullmaintmarginreqc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullmaintmarginreqf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullmaintmarginreqs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGrosspositionvalue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGrosspositionvaluec(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGrosspositionvaluef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGrosspositionvalues(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGuarantee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGuaranteec(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGuaranteef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGuarantees(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHighestseverity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHighestseverityc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHighestseverityf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHighestseveritys(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndianstockhaircut(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndianstockhaircutc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndianstockhaircutf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndianstockhaircuts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInitmarginreq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInitmarginreqc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInitmarginreqf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInitmarginreqs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLeverage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLeveragec(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLeveragef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLeverages(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadavailablefunds(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadavailablefundsc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadavailablefundsf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadavailablefundss(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadexcessliquidity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadexcessliquidityc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadexcessliquidityf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadexcessliquiditys(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadinitmarginreq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadinitmarginreqc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadinitmarginreqf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadinitmarginreqs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadmaintmarginreq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadmaintmarginreqc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadmaintmarginreqf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadmaintmarginreqs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLookaheadnextchange(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMaintmarginreq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMaintmarginreqc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMaintmarginreqf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMaintmarginreqs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetliquidation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetliquidationc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetliquidationf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetliquidations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetliquidationuncertainty(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNlvandmargininreview(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePasharesvalue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePasharesvaluec(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePasharesvaluef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePasharesvalues(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostexpirationexcess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostexpirationexcessc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostexpirationexcessf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostexpirationexcesss(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostexpirationmargin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostexpirationmarginc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostexpirationmarginf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostexpirationmargins(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePreviousdayequitywithloanvalue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePreviousdayequitywithloanvaluec(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePreviousdayequitywithloanvaluef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePreviousdayequitywithloanvalues(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSegmenttitlec(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSegmenttitlef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSegmenttitles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalcashvalue(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalcashvaluec(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalcashvaluef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalcashvalues(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotaldebitcardpendingcharges(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotaldebitcardpendingchargesc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotaldebitcardpendingchargesf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotaldebitcardpendingchargess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTradingtypef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTradingtypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAccountready(formats strfmt.Registry) error {

	if swag.IsZero(o.Accountready) { // not required
		return nil
	}

	if o.Accountready != nil {
		if err := o.Accountready.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "accountready")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAccounttype(formats strfmt.Registry) error {

	if swag.IsZero(o.Accounttype) { // not required
		return nil
	}

	if o.Accounttype != nil {
		if err := o.Accounttype.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "accounttype")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAccruedcash(formats strfmt.Registry) error {

	if swag.IsZero(o.Accruedcash) { // not required
		return nil
	}

	if o.Accruedcash != nil {
		if err := o.Accruedcash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "accruedcash")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAccruedcashc(formats strfmt.Registry) error {

	if swag.IsZero(o.Accruedcashc) { // not required
		return nil
	}

	if o.Accruedcashc != nil {
		if err := o.Accruedcashc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "accruedcash-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAccruedcashf(formats strfmt.Registry) error {

	if swag.IsZero(o.Accruedcashf) { // not required
		return nil
	}

	if o.Accruedcashf != nil {
		if err := o.Accruedcashf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "accruedcash-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAccruedcashs(formats strfmt.Registry) error {

	if swag.IsZero(o.Accruedcashs) { // not required
		return nil
	}

	if o.Accruedcashs != nil {
		if err := o.Accruedcashs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "accruedcash-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAccrueddividend(formats strfmt.Registry) error {

	if swag.IsZero(o.Accrueddividend) { // not required
		return nil
	}

	if o.Accrueddividend != nil {
		if err := o.Accrueddividend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "accrueddividend")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAccrueddividendc(formats strfmt.Registry) error {

	if swag.IsZero(o.Accrueddividendc) { // not required
		return nil
	}

	if o.Accrueddividendc != nil {
		if err := o.Accrueddividendc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "accrueddividend-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAccrueddividendf(formats strfmt.Registry) error {

	if swag.IsZero(o.Accrueddividendf) { // not required
		return nil
	}

	if o.Accrueddividendf != nil {
		if err := o.Accrueddividendf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "accrueddividend-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAccrueddividends(formats strfmt.Registry) error {

	if swag.IsZero(o.Accrueddividends) { // not required
		return nil
	}

	if o.Accrueddividends != nil {
		if err := o.Accrueddividends.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "accrueddividend-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAvailablefunds(formats strfmt.Registry) error {

	if swag.IsZero(o.Availablefunds) { // not required
		return nil
	}

	if o.Availablefunds != nil {
		if err := o.Availablefunds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "availablefunds")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAvailablefundsc(formats strfmt.Registry) error {

	if swag.IsZero(o.Availablefundsc) { // not required
		return nil
	}

	if o.Availablefundsc != nil {
		if err := o.Availablefundsc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "availablefunds-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAvailablefundsf(formats strfmt.Registry) error {

	if swag.IsZero(o.Availablefundsf) { // not required
		return nil
	}

	if o.Availablefundsf != nil {
		if err := o.Availablefundsf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "availablefunds-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateAvailablefundss(formats strfmt.Registry) error {

	if swag.IsZero(o.Availablefundss) { // not required
		return nil
	}

	if o.Availablefundss != nil {
		if err := o.Availablefundss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "availablefunds-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateBillable(formats strfmt.Registry) error {

	if swag.IsZero(o.Billable) { // not required
		return nil
	}

	if o.Billable != nil {
		if err := o.Billable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "billable")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateBillablec(formats strfmt.Registry) error {

	if swag.IsZero(o.Billablec) { // not required
		return nil
	}

	if o.Billablec != nil {
		if err := o.Billablec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "billable-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateBillablef(formats strfmt.Registry) error {

	if swag.IsZero(o.Billablef) { // not required
		return nil
	}

	if o.Billablef != nil {
		if err := o.Billablef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "billable-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateBillables(formats strfmt.Registry) error {

	if swag.IsZero(o.Billables) { // not required
		return nil
	}

	if o.Billables != nil {
		if err := o.Billables.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "billable-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateBuyingpower(formats strfmt.Registry) error {

	if swag.IsZero(o.Buyingpower) { // not required
		return nil
	}

	if o.Buyingpower != nil {
		if err := o.Buyingpower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "buyingpower")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateCushion(formats strfmt.Registry) error {

	if swag.IsZero(o.Cushion) { // not required
		return nil
	}

	if o.Cushion != nil {
		if err := o.Cushion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "cushion")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateDaytradesremaining(formats strfmt.Registry) error {

	if swag.IsZero(o.Daytradesremaining) { // not required
		return nil
	}

	if o.Daytradesremaining != nil {
		if err := o.Daytradesremaining.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "daytradesremaining")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateDaytradesremainingt1(formats strfmt.Registry) error {

	if swag.IsZero(o.Daytradesremainingt1) { // not required
		return nil
	}

	if o.Daytradesremainingt1 != nil {
		if err := o.Daytradesremainingt1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "daytradesremainingt+1")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateDaytradesremainingt2(formats strfmt.Registry) error {

	if swag.IsZero(o.Daytradesremainingt2) { // not required
		return nil
	}

	if o.Daytradesremainingt2 != nil {
		if err := o.Daytradesremainingt2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "daytradesremainingt+2")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateDaytradesremainingt3(formats strfmt.Registry) error {

	if swag.IsZero(o.Daytradesremainingt3) { // not required
		return nil
	}

	if o.Daytradesremainingt3 != nil {
		if err := o.Daytradesremainingt3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "daytradesremainingt+3")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateDaytradesremainingt4(formats strfmt.Registry) error {

	if swag.IsZero(o.Daytradesremainingt4) { // not required
		return nil
	}

	if o.Daytradesremainingt4 != nil {
		if err := o.Daytradesremainingt4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "daytradesremainingt+4")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateEquitywithloanvalue(formats strfmt.Registry) error {

	if swag.IsZero(o.Equitywithloanvalue) { // not required
		return nil
	}

	if o.Equitywithloanvalue != nil {
		if err := o.Equitywithloanvalue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "equitywithloanvalue")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateEquitywithloanvaluec(formats strfmt.Registry) error {

	if swag.IsZero(o.Equitywithloanvaluec) { // not required
		return nil
	}

	if o.Equitywithloanvaluec != nil {
		if err := o.Equitywithloanvaluec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "equitywithloanvalue-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateEquitywithloanvaluef(formats strfmt.Registry) error {

	if swag.IsZero(o.Equitywithloanvaluef) { // not required
		return nil
	}

	if o.Equitywithloanvaluef != nil {
		if err := o.Equitywithloanvaluef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "equitywithloanvalue-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateEquitywithloanvalues(formats strfmt.Registry) error {

	if swag.IsZero(o.Equitywithloanvalues) { // not required
		return nil
	}

	if o.Equitywithloanvalues != nil {
		if err := o.Equitywithloanvalues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "equitywithloanvalue-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateExcessliquidity(formats strfmt.Registry) error {

	if swag.IsZero(o.Excessliquidity) { // not required
		return nil
	}

	if o.Excessliquidity != nil {
		if err := o.Excessliquidity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "excessliquidity")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateExcessliquidityc(formats strfmt.Registry) error {

	if swag.IsZero(o.Excessliquidityc) { // not required
		return nil
	}

	if o.Excessliquidityc != nil {
		if err := o.Excessliquidityc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "excessliquidity-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateExcessliquidityf(formats strfmt.Registry) error {

	if swag.IsZero(o.Excessliquidityf) { // not required
		return nil
	}

	if o.Excessliquidityf != nil {
		if err := o.Excessliquidityf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "excessliquidity-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateExcessliquiditys(formats strfmt.Registry) error {

	if swag.IsZero(o.Excessliquiditys) { // not required
		return nil
	}

	if o.Excessliquiditys != nil {
		if err := o.Excessliquiditys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "excessliquidity-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullavailablefunds(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullavailablefunds) { // not required
		return nil
	}

	if o.Fullavailablefunds != nil {
		if err := o.Fullavailablefunds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullavailablefunds")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullavailablefundsc(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullavailablefundsc) { // not required
		return nil
	}

	if o.Fullavailablefundsc != nil {
		if err := o.Fullavailablefundsc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullavailablefunds-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullavailablefundsf(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullavailablefundsf) { // not required
		return nil
	}

	if o.Fullavailablefundsf != nil {
		if err := o.Fullavailablefundsf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullavailablefunds-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullavailablefundss(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullavailablefundss) { // not required
		return nil
	}

	if o.Fullavailablefundss != nil {
		if err := o.Fullavailablefundss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullavailablefunds-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullexcessliquidity(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullexcessliquidity) { // not required
		return nil
	}

	if o.Fullexcessliquidity != nil {
		if err := o.Fullexcessliquidity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullexcessliquidity")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullexcessliquidityc(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullexcessliquidityc) { // not required
		return nil
	}

	if o.Fullexcessliquidityc != nil {
		if err := o.Fullexcessliquidityc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullexcessliquidity-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullexcessliquidityf(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullexcessliquidityf) { // not required
		return nil
	}

	if o.Fullexcessliquidityf != nil {
		if err := o.Fullexcessliquidityf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullexcessliquidity-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullexcessliquiditys(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullexcessliquiditys) { // not required
		return nil
	}

	if o.Fullexcessliquiditys != nil {
		if err := o.Fullexcessliquiditys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullexcessliquidity-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullinitmarginreq(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullinitmarginreq) { // not required
		return nil
	}

	if o.Fullinitmarginreq != nil {
		if err := o.Fullinitmarginreq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullinitmarginreq")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullinitmarginreqc(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullinitmarginreqc) { // not required
		return nil
	}

	if o.Fullinitmarginreqc != nil {
		if err := o.Fullinitmarginreqc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullinitmarginreq-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullinitmarginreqf(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullinitmarginreqf) { // not required
		return nil
	}

	if o.Fullinitmarginreqf != nil {
		if err := o.Fullinitmarginreqf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullinitmarginreq-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullinitmarginreqs(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullinitmarginreqs) { // not required
		return nil
	}

	if o.Fullinitmarginreqs != nil {
		if err := o.Fullinitmarginreqs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullinitmarginreq-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullmaintmarginreq(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullmaintmarginreq) { // not required
		return nil
	}

	if o.Fullmaintmarginreq != nil {
		if err := o.Fullmaintmarginreq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullmaintmarginreq")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullmaintmarginreqc(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullmaintmarginreqc) { // not required
		return nil
	}

	if o.Fullmaintmarginreqc != nil {
		if err := o.Fullmaintmarginreqc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullmaintmarginreq-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullmaintmarginreqf(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullmaintmarginreqf) { // not required
		return nil
	}

	if o.Fullmaintmarginreqf != nil {
		if err := o.Fullmaintmarginreqf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullmaintmarginreq-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateFullmaintmarginreqs(formats strfmt.Registry) error {

	if swag.IsZero(o.Fullmaintmarginreqs) { // not required
		return nil
	}

	if o.Fullmaintmarginreqs != nil {
		if err := o.Fullmaintmarginreqs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "fullmaintmarginreq-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateGrosspositionvalue(formats strfmt.Registry) error {

	if swag.IsZero(o.Grosspositionvalue) { // not required
		return nil
	}

	if o.Grosspositionvalue != nil {
		if err := o.Grosspositionvalue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "grosspositionvalue")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateGrosspositionvaluec(formats strfmt.Registry) error {

	if swag.IsZero(o.Grosspositionvaluec) { // not required
		return nil
	}

	if o.Grosspositionvaluec != nil {
		if err := o.Grosspositionvaluec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "grosspositionvalue-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateGrosspositionvaluef(formats strfmt.Registry) error {

	if swag.IsZero(o.Grosspositionvaluef) { // not required
		return nil
	}

	if o.Grosspositionvaluef != nil {
		if err := o.Grosspositionvaluef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "grosspositionvalue-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateGrosspositionvalues(formats strfmt.Registry) error {

	if swag.IsZero(o.Grosspositionvalues) { // not required
		return nil
	}

	if o.Grosspositionvalues != nil {
		if err := o.Grosspositionvalues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "grosspositionvalue-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateGuarantee(formats strfmt.Registry) error {

	if swag.IsZero(o.Guarantee) { // not required
		return nil
	}

	if o.Guarantee != nil {
		if err := o.Guarantee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "guarantee")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateGuaranteec(formats strfmt.Registry) error {

	if swag.IsZero(o.Guaranteec) { // not required
		return nil
	}

	if o.Guaranteec != nil {
		if err := o.Guaranteec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "guarantee-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateGuaranteef(formats strfmt.Registry) error {

	if swag.IsZero(o.Guaranteef) { // not required
		return nil
	}

	if o.Guaranteef != nil {
		if err := o.Guaranteef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "guarantee-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateGuarantees(formats strfmt.Registry) error {

	if swag.IsZero(o.Guarantees) { // not required
		return nil
	}

	if o.Guarantees != nil {
		if err := o.Guarantees.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "guarantee-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateHighestseverity(formats strfmt.Registry) error {

	if swag.IsZero(o.Highestseverity) { // not required
		return nil
	}

	if o.Highestseverity != nil {
		if err := o.Highestseverity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "highestseverity")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateHighestseverityc(formats strfmt.Registry) error {

	if swag.IsZero(o.Highestseverityc) { // not required
		return nil
	}

	if o.Highestseverityc != nil {
		if err := o.Highestseverityc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "highestseverity-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateHighestseverityf(formats strfmt.Registry) error {

	if swag.IsZero(o.Highestseverityf) { // not required
		return nil
	}

	if o.Highestseverityf != nil {
		if err := o.Highestseverityf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "highestseverity-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateHighestseveritys(formats strfmt.Registry) error {

	if swag.IsZero(o.Highestseveritys) { // not required
		return nil
	}

	if o.Highestseveritys != nil {
		if err := o.Highestseveritys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "highestseverity-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateIndianstockhaircut(formats strfmt.Registry) error {

	if swag.IsZero(o.Indianstockhaircut) { // not required
		return nil
	}

	if o.Indianstockhaircut != nil {
		if err := o.Indianstockhaircut.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "indianstockhaircut")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateIndianstockhaircutc(formats strfmt.Registry) error {

	if swag.IsZero(o.Indianstockhaircutc) { // not required
		return nil
	}

	if o.Indianstockhaircutc != nil {
		if err := o.Indianstockhaircutc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "indianstockhaircut-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateIndianstockhaircutf(formats strfmt.Registry) error {

	if swag.IsZero(o.Indianstockhaircutf) { // not required
		return nil
	}

	if o.Indianstockhaircutf != nil {
		if err := o.Indianstockhaircutf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "indianstockhaircut-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateIndianstockhaircuts(formats strfmt.Registry) error {

	if swag.IsZero(o.Indianstockhaircuts) { // not required
		return nil
	}

	if o.Indianstockhaircuts != nil {
		if err := o.Indianstockhaircuts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "indianstockhaircut-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateInitmarginreq(formats strfmt.Registry) error {

	if swag.IsZero(o.Initmarginreq) { // not required
		return nil
	}

	if o.Initmarginreq != nil {
		if err := o.Initmarginreq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "initmarginreq")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateInitmarginreqc(formats strfmt.Registry) error {

	if swag.IsZero(o.Initmarginreqc) { // not required
		return nil
	}

	if o.Initmarginreqc != nil {
		if err := o.Initmarginreqc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "initmarginreq-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateInitmarginreqf(formats strfmt.Registry) error {

	if swag.IsZero(o.Initmarginreqf) { // not required
		return nil
	}

	if o.Initmarginreqf != nil {
		if err := o.Initmarginreqf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "initmarginreq-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateInitmarginreqs(formats strfmt.Registry) error {

	if swag.IsZero(o.Initmarginreqs) { // not required
		return nil
	}

	if o.Initmarginreqs != nil {
		if err := o.Initmarginreqs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "initmarginreq-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLeverage(formats strfmt.Registry) error {

	if swag.IsZero(o.Leverage) { // not required
		return nil
	}

	if o.Leverage != nil {
		if err := o.Leverage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "leverage")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLeveragec(formats strfmt.Registry) error {

	if swag.IsZero(o.Leveragec) { // not required
		return nil
	}

	if o.Leveragec != nil {
		if err := o.Leveragec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "leverage-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLeveragef(formats strfmt.Registry) error {

	if swag.IsZero(o.Leveragef) { // not required
		return nil
	}

	if o.Leveragef != nil {
		if err := o.Leveragef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "leverage-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLeverages(formats strfmt.Registry) error {

	if swag.IsZero(o.Leverages) { // not required
		return nil
	}

	if o.Leverages != nil {
		if err := o.Leverages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "leverage-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadavailablefunds(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadavailablefunds) { // not required
		return nil
	}

	if o.Lookaheadavailablefunds != nil {
		if err := o.Lookaheadavailablefunds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadavailablefunds")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadavailablefundsc(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadavailablefundsc) { // not required
		return nil
	}

	if o.Lookaheadavailablefundsc != nil {
		if err := o.Lookaheadavailablefundsc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadavailablefunds-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadavailablefundsf(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadavailablefundsf) { // not required
		return nil
	}

	if o.Lookaheadavailablefundsf != nil {
		if err := o.Lookaheadavailablefundsf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadavailablefunds-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadavailablefundss(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadavailablefundss) { // not required
		return nil
	}

	if o.Lookaheadavailablefundss != nil {
		if err := o.Lookaheadavailablefundss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadavailablefunds-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadexcessliquidity(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadexcessliquidity) { // not required
		return nil
	}

	if o.Lookaheadexcessliquidity != nil {
		if err := o.Lookaheadexcessliquidity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadexcessliquidity")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadexcessliquidityc(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadexcessliquidityc) { // not required
		return nil
	}

	if o.Lookaheadexcessliquidityc != nil {
		if err := o.Lookaheadexcessliquidityc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadexcessliquidity-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadexcessliquidityf(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadexcessliquidityf) { // not required
		return nil
	}

	if o.Lookaheadexcessliquidityf != nil {
		if err := o.Lookaheadexcessliquidityf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadexcessliquidity-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadexcessliquiditys(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadexcessliquiditys) { // not required
		return nil
	}

	if o.Lookaheadexcessliquiditys != nil {
		if err := o.Lookaheadexcessliquiditys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadexcessliquidity-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadinitmarginreq(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadinitmarginreq) { // not required
		return nil
	}

	if o.Lookaheadinitmarginreq != nil {
		if err := o.Lookaheadinitmarginreq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadinitmarginreq")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadinitmarginreqc(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadinitmarginreqc) { // not required
		return nil
	}

	if o.Lookaheadinitmarginreqc != nil {
		if err := o.Lookaheadinitmarginreqc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadinitmarginreq-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadinitmarginreqf(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadinitmarginreqf) { // not required
		return nil
	}

	if o.Lookaheadinitmarginreqf != nil {
		if err := o.Lookaheadinitmarginreqf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadinitmarginreq-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadinitmarginreqs(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadinitmarginreqs) { // not required
		return nil
	}

	if o.Lookaheadinitmarginreqs != nil {
		if err := o.Lookaheadinitmarginreqs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadinitmarginreq-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadmaintmarginreq(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadmaintmarginreq) { // not required
		return nil
	}

	if o.Lookaheadmaintmarginreq != nil {
		if err := o.Lookaheadmaintmarginreq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadmaintmarginreq")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadmaintmarginreqc(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadmaintmarginreqc) { // not required
		return nil
	}

	if o.Lookaheadmaintmarginreqc != nil {
		if err := o.Lookaheadmaintmarginreqc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadmaintmarginreq-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadmaintmarginreqf(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadmaintmarginreqf) { // not required
		return nil
	}

	if o.Lookaheadmaintmarginreqf != nil {
		if err := o.Lookaheadmaintmarginreqf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadmaintmarginreq-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadmaintmarginreqs(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadmaintmarginreqs) { // not required
		return nil
	}

	if o.Lookaheadmaintmarginreqs != nil {
		if err := o.Lookaheadmaintmarginreqs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadmaintmarginreq-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateLookaheadnextchange(formats strfmt.Registry) error {

	if swag.IsZero(o.Lookaheadnextchange) { // not required
		return nil
	}

	if o.Lookaheadnextchange != nil {
		if err := o.Lookaheadnextchange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "lookaheadnextchange")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateMaintmarginreq(formats strfmt.Registry) error {

	if swag.IsZero(o.Maintmarginreq) { // not required
		return nil
	}

	if o.Maintmarginreq != nil {
		if err := o.Maintmarginreq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "maintmarginreq")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateMaintmarginreqc(formats strfmt.Registry) error {

	if swag.IsZero(o.Maintmarginreqc) { // not required
		return nil
	}

	if o.Maintmarginreqc != nil {
		if err := o.Maintmarginreqc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "maintmarginreq-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateMaintmarginreqf(formats strfmt.Registry) error {

	if swag.IsZero(o.Maintmarginreqf) { // not required
		return nil
	}

	if o.Maintmarginreqf != nil {
		if err := o.Maintmarginreqf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "maintmarginreq-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateMaintmarginreqs(formats strfmt.Registry) error {

	if swag.IsZero(o.Maintmarginreqs) { // not required
		return nil
	}

	if o.Maintmarginreqs != nil {
		if err := o.Maintmarginreqs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "maintmarginreq-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateNetliquidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Netliquidation) { // not required
		return nil
	}

	if o.Netliquidation != nil {
		if err := o.Netliquidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "netliquidation")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateNetliquidationc(formats strfmt.Registry) error {

	if swag.IsZero(o.Netliquidationc) { // not required
		return nil
	}

	if o.Netliquidationc != nil {
		if err := o.Netliquidationc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "netliquidation-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateNetliquidationf(formats strfmt.Registry) error {

	if swag.IsZero(o.Netliquidationf) { // not required
		return nil
	}

	if o.Netliquidationf != nil {
		if err := o.Netliquidationf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "netliquidation-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateNetliquidations(formats strfmt.Registry) error {

	if swag.IsZero(o.Netliquidations) { // not required
		return nil
	}

	if o.Netliquidations != nil {
		if err := o.Netliquidations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "netliquidation-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateNetliquidationuncertainty(formats strfmt.Registry) error {

	if swag.IsZero(o.Netliquidationuncertainty) { // not required
		return nil
	}

	if o.Netliquidationuncertainty != nil {
		if err := o.Netliquidationuncertainty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "netliquidationuncertainty")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateNlvandmargininreview(formats strfmt.Registry) error {

	if swag.IsZero(o.Nlvandmargininreview) { // not required
		return nil
	}

	if o.Nlvandmargininreview != nil {
		if err := o.Nlvandmargininreview.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "nlvandmargininreview")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePasharesvalue(formats strfmt.Registry) error {

	if swag.IsZero(o.Pasharesvalue) { // not required
		return nil
	}

	if o.Pasharesvalue != nil {
		if err := o.Pasharesvalue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "pasharesvalue")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePasharesvaluec(formats strfmt.Registry) error {

	if swag.IsZero(o.Pasharesvaluec) { // not required
		return nil
	}

	if o.Pasharesvaluec != nil {
		if err := o.Pasharesvaluec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "pasharesvalue-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePasharesvaluef(formats strfmt.Registry) error {

	if swag.IsZero(o.Pasharesvaluef) { // not required
		return nil
	}

	if o.Pasharesvaluef != nil {
		if err := o.Pasharesvaluef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "pasharesvalue-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePasharesvalues(formats strfmt.Registry) error {

	if swag.IsZero(o.Pasharesvalues) { // not required
		return nil
	}

	if o.Pasharesvalues != nil {
		if err := o.Pasharesvalues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "pasharesvalue-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePostexpirationexcess(formats strfmt.Registry) error {

	if swag.IsZero(o.Postexpirationexcess) { // not required
		return nil
	}

	if o.Postexpirationexcess != nil {
		if err := o.Postexpirationexcess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "postexpirationexcess")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePostexpirationexcessc(formats strfmt.Registry) error {

	if swag.IsZero(o.Postexpirationexcessc) { // not required
		return nil
	}

	if o.Postexpirationexcessc != nil {
		if err := o.Postexpirationexcessc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "postexpirationexcess-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePostexpirationexcessf(formats strfmt.Registry) error {

	if swag.IsZero(o.Postexpirationexcessf) { // not required
		return nil
	}

	if o.Postexpirationexcessf != nil {
		if err := o.Postexpirationexcessf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "postexpirationexcess-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePostexpirationexcesss(formats strfmt.Registry) error {

	if swag.IsZero(o.Postexpirationexcesss) { // not required
		return nil
	}

	if o.Postexpirationexcesss != nil {
		if err := o.Postexpirationexcesss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "postexpirationexcess-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePostexpirationmargin(formats strfmt.Registry) error {

	if swag.IsZero(o.Postexpirationmargin) { // not required
		return nil
	}

	if o.Postexpirationmargin != nil {
		if err := o.Postexpirationmargin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "postexpirationmargin")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePostexpirationmarginc(formats strfmt.Registry) error {

	if swag.IsZero(o.Postexpirationmarginc) { // not required
		return nil
	}

	if o.Postexpirationmarginc != nil {
		if err := o.Postexpirationmarginc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "postexpirationmargin-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePostexpirationmarginf(formats strfmt.Registry) error {

	if swag.IsZero(o.Postexpirationmarginf) { // not required
		return nil
	}

	if o.Postexpirationmarginf != nil {
		if err := o.Postexpirationmarginf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "postexpirationmargin-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePostexpirationmargins(formats strfmt.Registry) error {

	if swag.IsZero(o.Postexpirationmargins) { // not required
		return nil
	}

	if o.Postexpirationmargins != nil {
		if err := o.Postexpirationmargins.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "postexpirationmargin-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePreviousdayequitywithloanvalue(formats strfmt.Registry) error {

	if swag.IsZero(o.Previousdayequitywithloanvalue) { // not required
		return nil
	}

	if o.Previousdayequitywithloanvalue != nil {
		if err := o.Previousdayequitywithloanvalue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "previousdayequitywithloanvalue")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePreviousdayequitywithloanvaluec(formats strfmt.Registry) error {

	if swag.IsZero(o.Previousdayequitywithloanvaluec) { // not required
		return nil
	}

	if o.Previousdayequitywithloanvaluec != nil {
		if err := o.Previousdayequitywithloanvaluec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "previousdayequitywithloanvalue-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePreviousdayequitywithloanvaluef(formats strfmt.Registry) error {

	if swag.IsZero(o.Previousdayequitywithloanvaluef) { // not required
		return nil
	}

	if o.Previousdayequitywithloanvaluef != nil {
		if err := o.Previousdayequitywithloanvaluef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "previousdayequitywithloanvalue-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validatePreviousdayequitywithloanvalues(formats strfmt.Registry) error {

	if swag.IsZero(o.Previousdayequitywithloanvalues) { // not required
		return nil
	}

	if o.Previousdayequitywithloanvalues != nil {
		if err := o.Previousdayequitywithloanvalues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "previousdayequitywithloanvalue-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateSegmenttitlec(formats strfmt.Registry) error {

	if swag.IsZero(o.Segmenttitlec) { // not required
		return nil
	}

	if o.Segmenttitlec != nil {
		if err := o.Segmenttitlec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "segmenttitle-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateSegmenttitlef(formats strfmt.Registry) error {

	if swag.IsZero(o.Segmenttitlef) { // not required
		return nil
	}

	if o.Segmenttitlef != nil {
		if err := o.Segmenttitlef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "segmenttitle-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateSegmenttitles(formats strfmt.Registry) error {

	if swag.IsZero(o.Segmenttitles) { // not required
		return nil
	}

	if o.Segmenttitles != nil {
		if err := o.Segmenttitles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "segmenttitle-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateTotalcashvalue(formats strfmt.Registry) error {

	if swag.IsZero(o.Totalcashvalue) { // not required
		return nil
	}

	if o.Totalcashvalue != nil {
		if err := o.Totalcashvalue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "totalcashvalue")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateTotalcashvaluec(formats strfmt.Registry) error {

	if swag.IsZero(o.Totalcashvaluec) { // not required
		return nil
	}

	if o.Totalcashvaluec != nil {
		if err := o.Totalcashvaluec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "totalcashvalue-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateTotalcashvaluef(formats strfmt.Registry) error {

	if swag.IsZero(o.Totalcashvaluef) { // not required
		return nil
	}

	if o.Totalcashvaluef != nil {
		if err := o.Totalcashvaluef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "totalcashvalue-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateTotalcashvalues(formats strfmt.Registry) error {

	if swag.IsZero(o.Totalcashvalues) { // not required
		return nil
	}

	if o.Totalcashvalues != nil {
		if err := o.Totalcashvalues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "totalcashvalue-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateTotaldebitcardpendingcharges(formats strfmt.Registry) error {

	if swag.IsZero(o.Totaldebitcardpendingcharges) { // not required
		return nil
	}

	if o.Totaldebitcardpendingcharges != nil {
		if err := o.Totaldebitcardpendingcharges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "totaldebitcardpendingcharges")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateTotaldebitcardpendingchargesc(formats strfmt.Registry) error {

	if swag.IsZero(o.Totaldebitcardpendingchargesc) { // not required
		return nil
	}

	if o.Totaldebitcardpendingchargesc != nil {
		if err := o.Totaldebitcardpendingchargesc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "totaldebitcardpendingcharges-c")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateTotaldebitcardpendingchargesf(formats strfmt.Registry) error {

	if swag.IsZero(o.Totaldebitcardpendingchargesf) { // not required
		return nil
	}

	if o.Totaldebitcardpendingchargesf != nil {
		if err := o.Totaldebitcardpendingchargesf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "totaldebitcardpendingcharges-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateTotaldebitcardpendingchargess(formats strfmt.Registry) error {

	if swag.IsZero(o.Totaldebitcardpendingchargess) { // not required
		return nil
	}

	if o.Totaldebitcardpendingchargess != nil {
		if err := o.Totaldebitcardpendingchargess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "totaldebitcardpendingcharges-s")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateTradingtypef(formats strfmt.Registry) error {

	if swag.IsZero(o.Tradingtypef) { // not required
		return nil
	}

	if o.Tradingtypef != nil {
		if err := o.Tradingtypef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "tradingtype-f")
			}
			return err
		}
	}

	return nil
}

func (o *GetPortfolioAccountIDSummaryOKBody) validateTradingtypes(formats strfmt.Registry) error {

	if swag.IsZero(o.Tradingtypes) { // not required
		return nil
	}

	if o.Tradingtypes != nil {
		if err := o.Tradingtypes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPortfolioAccountIdSummaryOK" + "." + "tradingtype-s")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPortfolioAccountIDSummaryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPortfolioAccountIDSummaryOKBody) UnmarshalBinary(b []byte) error {
	var res GetPortfolioAccountIDSummaryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
