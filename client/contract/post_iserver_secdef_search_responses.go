// Code generated by go-swagger; DO NOT EDIT.

package contract

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"io"
)

// PostSecdefSearchReader is a Reader for the PostSecdefSearch structure.
type PostSecdefSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSecdefSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostSecdefSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewPostSecdefSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostSecdefSearchOK creates a PostSecdefSearchOK with default headers values
func NewPostSecdefSearchOK() *PostSecdefSearchOK {
	return &PostSecdefSearchOK{}
}

/*PostSecdefSearchOK handles this case with default header values.

returns an array of results
*/
type PostSecdefSearchOK struct {
	Payload []*PostSecdefSearchOKBodyItems0
}

func (o *PostSecdefSearchOK) Error() string {
	return fmt.Sprintf("[POST /iserver/secdef/search][%d] postSecdefSearchOK  %+v", 200, o.Payload)
}

func (o *PostSecdefSearchOK) GetPayload() []*PostSecdefSearchOKBodyItems0 {
	return o.Payload
}

func (o *PostSecdefSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSecdefSearchInternalServerError creates a
// PostSecdefSearchInternalServerError with default headers values
func NewPostSecdefSearchInternalServerError() *PostSecdefSearchInternalServerError {
	return &PostSecdefSearchInternalServerError{}
}

/*
PostSecdefSearchInternalServerError handles this case with default header values.
error while processing the request
*/
type PostSecdefSearchInternalServerError struct {
	Payload *PostSecdefSearchInternalServerErrorBody
}

func (o *PostSecdefSearchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /iserver/secdef/search][%d] postSecdefSearchInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSecdefSearchInternalServerError) GetPayload() *PostSecdefSearchInternalServerErrorBody {
	return o.Payload
}

func (o *PostSecdefSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostSecdefSearchInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostSecdefSearchBody post iserver secdef search body
swagger:model PostSecdefSearchBody
*/
type PostSecdefSearchBody struct {
	// should be true if the search is to be performed by name. false by default.
	Name bool `json:"name,omitempty"`
	// If search is done by name, only the assets provided in this field will be returned. Currently, only STK is supported.
	SecType string `json:"secType,omitempty"`
	// symbol or name to be searched
	// Required: true
	Symbol *string `json:"symbol"`
}

// Validate validates this post iserver secdef search body
func (o *PostSecdefSearchBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSymbol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSecdefSearchBody) validateSymbol(formats strfmt.Registry) error {

	if err := validate.Required("symbol"+"."+"symbol", "body", o.Symbol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSecdefSearchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSecdefSearchBody) UnmarshalBinary(b []byte) error {
	var res PostSecdefSearchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSecdefSearchInternalServerErrorBody post iserver secdef search internal server error body
swagger:model PostSecdefSearchInternalServerErrorBody
*/
type PostSecdefSearchInternalServerErrorBody struct {
	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this post iserver secdef search internal server error body
func (o *PostSecdefSearchInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostSecdefSearchInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSecdefSearchInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostSecdefSearchInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSecdefSearchOKBodyItems0 post iserver secdef search o k body items0
swagger:model PostSecdefSearchOKBodyItems0
*/
type PostSecdefSearchOKBodyItems0 struct {
	// company header
	CompanyHeader string `json:"companyHeader,omitempty"`
	// company name
	CompanyName string `json:"companyName,omitempty"`
	// conid
	Conid int64 `json:"conid,omitempty"`
	// description
	Description string `json:"description,omitempty"`
	// opt
	Opt string `json:"opt,omitempty"`
	// sections
	Sections []interface{} `json:"sections"`
	// symbol
	Symbol string `json:"symbol,omitempty"`
	// war
	War string `json:"war,omitempty"`
}

// Validate validates this post iserver secdef search o k body items0
func (o *PostSecdefSearchOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostSecdefSearchOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSecdefSearchOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res PostSecdefSearchOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
