// Code generated by go-swagger; DO NOT EDIT.

package contract

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new contract API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contract API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetContractConidInfo contracts info get contract details,
you can use this to prefill your order before you submit an order
*/
func (a *Client) GetContractConidInfo(params *GetContractConidInfoParams) (*GetContractConidInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractConidInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContractConidInfo",
		Method:             "GET",
		PathPattern:        "/iserver/contract/{conid}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContractConidInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContractConidInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetContractConidInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTrsrvFutures securities futures by symbol
Returns a list of non-expired future contracts for given symbol(s)
*/
func (a *Client) GetTrsrvFutures(params *GetTrsrvFuturesParams) (*GetTrsrvFuturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTrsrvFuturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTrsrvFutures",
		Method:             "GET",
		PathPattern:        "/trsrv/futures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTrsrvFuturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTrsrvFuturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTrsrvFutures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSecdefSearch searches by symbol or name
*/
func (a *Client) PostSecdefSearch(params *PostSecdefSearchParams) (*PostSecdefSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecdefSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSecdefSearch",
		Method:             "POST",
		PathPattern:        "/iserver/secdef/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSecdefSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSecdefSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSecdefSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostTrsrvSecdef secdefs by conid

Returns a list of security definitions for the given conids
*/
func (a *Client) PostTrsrvSecdef(params *PostTrsrvSecdefParams) (*PostTrsrvSecdefOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTrsrvSecdefParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTrsrvSecdef",
		Method:             "POST",
		PathPattern:        "/trsrv/secdef",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTrsrvSecdefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTrsrvSecdefOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTrsrvSecdef: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
